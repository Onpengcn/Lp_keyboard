
software_c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b5c  08007b5c  000202c8  2**0
                  CONTENTS
  4 .ARM          00000000  08007b5c  08007b5c  000202c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b5c  08007b5c  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  08007b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  200002c8  08007e2c  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08007e2c  00020b44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2ec  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9b  00000000  00000000  0002e5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00031178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  00031dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001966b  00000000  00000000  000328b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbc8  00000000  00000000  0004bf1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844ba  00000000  00000000  0005bae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dff9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003050  00000000  00000000  000dfff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002c8 	.word	0x200002c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08007ad8 	.word	0x08007ad8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002cc 	.word	0x200002cc
 8000148:	08007ad8 	.word	0x08007ad8

0800014c <DelayUs>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void DelayUs(uint32_t _us)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < _us; i++)
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e00c      	b.n	8000174 <DelayUs+0x28>
        for (int j = 0; j < 8; j++)
 800015a:	2300      	movs	r3, #0
 800015c:	60bb      	str	r3, [r7, #8]
 800015e:	e003      	b.n	8000168 <DelayUs+0x1c>
            __NOP();
 8000160:	bf00      	nop
        for (int j = 0; j < 8; j++)
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	3301      	adds	r3, #1
 8000166:	60bb      	str	r3, [r7, #8]
 8000168:	68bb      	ldr	r3, [r7, #8]
 800016a:	2b07      	cmp	r3, #7
 800016c:	ddf8      	ble.n	8000160 <DelayUs+0x14>
    for (int i = 0; i < _us; i++)
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	3301      	adds	r3, #1
 8000172:	60fb      	str	r3, [r7, #12]
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	d8ee      	bhi.n	800015a <DelayUs+0xe>
}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fb10 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f814 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f8a6 	bl	80002e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000198:	f000 f86c 	bl	8000274 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800019c:	f007 f866 	bl	800726c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ScanKeyStates();  // Around 40us use 4MHz SPI clk
 80001a0:	f000 f8c2 	bl	8000328 <ScanKeyStates>
	  ApplyDebounceFilter(100);
 80001a4:	2064      	movs	r0, #100	; 0x64
 80001a6:	f000 f90d 	bl	80003c4 <ApplyDebounceFilter>
	  keymap_t_hbuf();  // When Fn pressed use layer-2
 80001aa:	f000 f941 	bl	8000430 <keymap_t_hbuf>

	  // Report HID key states
	  USBD_CUSTOM_HID_SendReport_FS(hidBuffer, KEY_REPORT_SIZE);
 80001ae:	2110      	movs	r1, #16
 80001b0:	4801      	ldr	r0, [pc, #4]	; (80001b8 <main+0x30>)
 80001b2:	f007 f8a7 	bl	8007304 <USBD_CUSTOM_HID_SendReport_FS>
	  ScanKeyStates();  // Around 40us use 4MHz SPI clk
 80001b6:	e7f3      	b.n	80001a0 <main+0x18>
 80001b8:	20000354 	.word	0x20000354

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	; 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f007 fc7c 	bl	8007ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800020c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fa64 	bl	80026e0 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021e:	f000 f9e7 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2101      	movs	r1, #1
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fcd0 	bl	8002be4 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024a:	f000 f9d1 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800024e:	2310      	movs	r3, #16
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000252:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000256:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fe28 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000266:	f000 f9c3 	bl	80005f0 <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3750      	adds	r7, #80	; 0x50
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_SPI1_Init+0x68>)
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <MX_SPI1_Init+0x6c>)
 800027c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_SPI1_Init+0x68>)
 8000280:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000284:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_SPI1_Init+0x68>)
 8000288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800028c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <MX_SPI1_Init+0x68>)
 8000290:	2200      	movs	r2, #0
 8000292:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_SPI1_Init+0x68>)
 8000296:	2200      	movs	r2, #0
 8000298:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_SPI1_Init+0x68>)
 800029c:	2200      	movs	r2, #0
 800029e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_SPI1_Init+0x68>)
 80002a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_SPI1_Init+0x68>)
 80002aa:	2208      	movs	r2, #8
 80002ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_SPI1_Init+0x68>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_SPI1_Init+0x68>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_SPI1_Init+0x68>)
 80002bc:	2200      	movs	r2, #0
 80002be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_SPI1_Init+0x68>)
 80002c2:	220a      	movs	r2, #10
 80002c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_SPI1_Init+0x68>)
 80002c8:	f002 fea8 	bl	800301c <HAL_SPI_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80002d2:	f000 f98d 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200002e4 	.word	0x200002e4
 80002e0:	40013000 	.word	0x40013000

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_GPIO_Init+0x40>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <MX_GPIO_Init+0x40>)
 80002f0:	f043 0320 	orr.w	r3, r3, #32
 80002f4:	6193      	str	r3, [r2, #24]
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <MX_GPIO_Init+0x40>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	f003 0320 	and.w	r3, r3, #32
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_GPIO_Init+0x40>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <MX_GPIO_Init+0x40>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	6193      	str	r3, [r2, #24]
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <MX_GPIO_Init+0x40>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	603b      	str	r3, [r7, #0]
 8000318:	683b      	ldr	r3, [r7, #0]

}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000

08000328 <ScanKeyStates>:

/* USER CODE BEGIN 4 */
uint8_t* ScanKeyStates()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    memset(spiBuffer, 0xFF, IO_NUMBER / 8 + 1);
 800032c:	220c      	movs	r2, #12
 800032e:	21ff      	movs	r1, #255	; 0xff
 8000330:	4821      	ldr	r0, [pc, #132]	; (80003b8 <ScanKeyStates+0x90>)
 8000332:	f007 fbc9 	bl	8007ac8 <memset>
    PL_GPIO_Port->BSRR = PL_Pin; // Latch
 8000336:	4b21      	ldr	r3, [pc, #132]	; (80003bc <ScanKeyStates+0x94>)
 8000338:	2210      	movs	r2, #16
 800033a:	611a      	str	r2, [r3, #16]

    hspi1.pRxBuffPtr = (uint8_t*) spiBuffer;
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <ScanKeyStates+0x98>)
 800033e:	4a1e      	ldr	r2, [pc, #120]	; (80003b8 <ScanKeyStates+0x90>)
 8000340:	639a      	str	r2, [r3, #56]	; 0x38
    hspi1.RxXferCount = IO_NUMBER / 8 + 1;
 8000342:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <ScanKeyStates+0x98>)
 8000344:	220c      	movs	r2, #12
 8000346:	87da      	strh	r2, [r3, #62]	; 0x3e
    __HAL_SPI_ENABLE(&hspi1);
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <ScanKeyStates+0x98>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <ScanKeyStates+0x98>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000356:	601a      	str	r2, [r3, #0]
    while (hspi1.RxXferCount > 0U)
 8000358:	e01b      	b.n	8000392 <ScanKeyStates+0x6a>
    {
        if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE))
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <ScanKeyStates+0x98>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	2b01      	cmp	r3, #1
 8000366:	d114      	bne.n	8000392 <ScanKeyStates+0x6a>
        {
            /* read the received data */
            (*(uint8_t*) hspi1.pRxBuffPtr) = *(__IO uint8_t*) &(hspi1.Instance->DR);
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <ScanKeyStates+0x98>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f103 020c 	add.w	r2, r3, #12
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <ScanKeyStates+0x98>)
 8000372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000374:	7812      	ldrb	r2, [r2, #0]
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	701a      	strb	r2, [r3, #0]
            hspi1.pRxBuffPtr += sizeof(uint8_t);
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <ScanKeyStates+0x98>)
 800037c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800037e:	3301      	adds	r3, #1
 8000380:	4a0f      	ldr	r2, [pc, #60]	; (80003c0 <ScanKeyStates+0x98>)
 8000382:	6393      	str	r3, [r2, #56]	; 0x38
            hspi1.RxXferCount--;
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <ScanKeyStates+0x98>)
 8000386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000388:	b29b      	uxth	r3, r3
 800038a:	3b01      	subs	r3, #1
 800038c:	b29a      	uxth	r2, r3
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <ScanKeyStates+0x98>)
 8000390:	87da      	strh	r2, [r3, #62]	; 0x3e
    while (hspi1.RxXferCount > 0U)
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <ScanKeyStates+0x98>)
 8000394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000396:	b29b      	uxth	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d1de      	bne.n	800035a <ScanKeyStates+0x32>

        }
    }
    __HAL_SPI_DISABLE(&hspi1);
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <ScanKeyStates+0x98>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <ScanKeyStates+0x98>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003aa:	601a      	str	r2, [r3, #0]

    PL_GPIO_Port->BRR = PL_Pin; // Sample
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <ScanKeyStates+0x94>)
 80003ae:	2210      	movs	r2, #16
 80003b0:	615a      	str	r2, [r3, #20]
    return (void*)0;
 80003b2:	2300      	movs	r3, #0
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000033c 	.word	0x2000033c
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	200002e4 	.word	0x200002e4

080003c4 <ApplyDebounceFilter>:

void ApplyDebounceFilter(uint32_t _filterTimeUs)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    memcpy(debounceBuffer, spiBuffer, IO_NUMBER / 8 + 1);
 80003cc:	220c      	movs	r2, #12
 80003ce:	4916      	ldr	r1, [pc, #88]	; (8000428 <ApplyDebounceFilter+0x64>)
 80003d0:	4816      	ldr	r0, [pc, #88]	; (800042c <ApplyDebounceFilter+0x68>)
 80003d2:	f007 fb6b 	bl	8007aac <memcpy>

    DelayUs(_filterTimeUs);
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f7ff feb8 	bl	800014c <DelayUs>
    ScanKeyStates();
 80003dc:	f7ff ffa4 	bl	8000328 <ScanKeyStates>

    uint8_t mask;
    for (int i = 0; i < IO_NUMBER / 8 + 1; i++)
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	e018      	b.n	8000418 <ApplyDebounceFilter+0x54>
    {
        mask = debounceBuffer[i] ^ spiBuffer[i];
 80003e6:	4a11      	ldr	r2, [pc, #68]	; (800042c <ApplyDebounceFilter+0x68>)
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4413      	add	r3, r2
 80003ec:	781a      	ldrb	r2, [r3, #0]
 80003ee:	490e      	ldr	r1, [pc, #56]	; (8000428 <ApplyDebounceFilter+0x64>)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	440b      	add	r3, r1
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4053      	eors	r3, r2
 80003f8:	72fb      	strb	r3, [r7, #11]
        spiBuffer[i] |= mask;
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <ApplyDebounceFilter+0x64>)
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	4413      	add	r3, r2
 8000400:	781a      	ldrb	r2, [r3, #0]
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	4313      	orrs	r3, r2
 8000406:	b2d9      	uxtb	r1, r3
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <ApplyDebounceFilter+0x64>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	4413      	add	r3, r2
 800040e:	460a      	mov	r2, r1
 8000410:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < IO_NUMBER / 8 + 1; i++)
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3301      	adds	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	2b0b      	cmp	r3, #11
 800041c:	dde3      	ble.n	80003e6 <ApplyDebounceFilter+0x22>
    }
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	2000033c 	.word	0x2000033c
 800042c:	20000348 	.word	0x20000348

08000430 <keymap_t_hbuf>:

void keymap_t_hbuf()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
	int16_t index, bitIndex;

	    memset(debounceBuffer, 0, IO_NUMBER / 8);
 8000436:	220b      	movs	r2, #11
 8000438:	2100      	movs	r1, #0
 800043a:	4869      	ldr	r0, [pc, #420]	; (80005e0 <keymap_t_hbuf+0x1b0>)
 800043c:	f007 fb44 	bl	8007ac8 <memset>
	    //for (int16_t i = 0; i < IO_NUMBER / 8; i++)
		for (int16_t i = 0; i < 2; i++)
 8000440:	2300      	movs	r3, #0
 8000442:	817b      	strh	r3, [r7, #10]
 8000444:	e05a      	b.n	80004fc <keymap_t_hbuf+0xcc>
	    {
	        for (int16_t j = 0; j < 8; j++)
 8000446:	2300      	movs	r3, #0
 8000448:	813b      	strh	r3, [r7, #8]
 800044a:	e043      	b.n	80004d4 <keymap_t_hbuf+0xa4>
	        {
	            index = (int16_t) (leapmotor_keymap[0][i * 8 + j] / 8);
 800044c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000450:	00da      	lsls	r2, r3, #3
 8000452:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000456:	4413      	add	r3, r2
 8000458:	4a62      	ldr	r2, [pc, #392]	; (80005e4 <keymap_t_hbuf+0x1b4>)
 800045a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800045e:	2b00      	cmp	r3, #0
 8000460:	da00      	bge.n	8000464 <keymap_t_hbuf+0x34>
 8000462:	3307      	adds	r3, #7
 8000464:	10db      	asrs	r3, r3, #3
 8000466:	81fb      	strh	r3, [r7, #14]
	            bitIndex = (int16_t) (leapmotor_keymap[0][i * 8 + j] % 8);
 8000468:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800046c:	00da      	lsls	r2, r3, #3
 800046e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000472:	4413      	add	r3, r2
 8000474:	4a5b      	ldr	r2, [pc, #364]	; (80005e4 <keymap_t_hbuf+0x1b4>)
 8000476:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800047a:	425a      	negs	r2, r3
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	f002 0207 	and.w	r2, r2, #7
 8000484:	bf58      	it	pl
 8000486:	4253      	negpl	r3, r2
 8000488:	81bb      	strh	r3, [r7, #12]
	            if (spiBuffer[index] & (0x80 >> bitIndex))
 800048a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800048e:	4a56      	ldr	r2, [pc, #344]	; (80005e8 <keymap_t_hbuf+0x1b8>)
 8000490:	5cd3      	ldrb	r3, [r2, r3]
 8000492:	4619      	mov	r1, r3
 8000494:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	fa42 f303 	asr.w	r3, r2, r3
 800049e:	400b      	ands	r3, r1
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d011      	beq.n	80004c8 <keymap_t_hbuf+0x98>
	                debounceBuffer[i] |= 0x80 >> j;
 80004a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004a8:	4a4d      	ldr	r2, [pc, #308]	; (80005e0 <keymap_t_hbuf+0x1b0>)
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	b25a      	sxtb	r2, r3
 80004ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	fa41 f303 	asr.w	r3, r1, r3
 80004b8:	b25b      	sxtb	r3, r3
 80004ba:	4313      	orrs	r3, r2
 80004bc:	b25a      	sxtb	r2, r3
 80004be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004c2:	b2d1      	uxtb	r1, r2
 80004c4:	4a46      	ldr	r2, [pc, #280]	; (80005e0 <keymap_t_hbuf+0x1b0>)
 80004c6:	54d1      	strb	r1, [r2, r3]
	        for (int16_t j = 0; j < 8; j++)
 80004c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	3301      	adds	r3, #1
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	813b      	strh	r3, [r7, #8]
 80004d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80004d8:	2b07      	cmp	r3, #7
 80004da:	ddb7      	ble.n	800044c <keymap_t_hbuf+0x1c>
	        }
	        debounceBuffer[i] = ~debounceBuffer[i];
 80004dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004e0:	4a3f      	ldr	r2, [pc, #252]	; (80005e0 <keymap_t_hbuf+0x1b0>)
 80004e2:	5cd2      	ldrb	r2, [r2, r3]
 80004e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004e8:	43d2      	mvns	r2, r2
 80004ea:	b2d1      	uxtb	r1, r2
 80004ec:	4a3c      	ldr	r2, [pc, #240]	; (80005e0 <keymap_t_hbuf+0x1b0>)
 80004ee:	54d1      	strb	r1, [r2, r3]
		for (int16_t i = 0; i < 2; i++)
 80004f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	3301      	adds	r3, #1
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	817b      	strh	r3, [r7, #10]
 80004fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000500:	2b01      	cmp	r3, #1
 8000502:	dda0      	ble.n	8000446 <keymap_t_hbuf+0x16>
	    }

	    memset(hidBuffer, 0, KEY_REPORT_SIZE);
 8000504:	2210      	movs	r2, #16
 8000506:	2100      	movs	r1, #0
 8000508:	4838      	ldr	r0, [pc, #224]	; (80005ec <keymap_t_hbuf+0x1bc>)
 800050a:	f007 fadd 	bl	8007ac8 <memset>
	    //for (int i = 0; i < IO_NUMBER / 8; i++)
		for (int i = 0; i < 2; i++)
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	e05d      	b.n	80005d0 <keymap_t_hbuf+0x1a0>
	    {
	        for (int j = 0; j < 8; j++)
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	e054      	b.n	80005c4 <keymap_t_hbuf+0x194>
	        {
	            index = (int16_t) (leapmotor_keymap[1][i * 8 + j] / 8 + 1); // +1 for modifier
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	00da      	lsls	r2, r3, #3
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	4413      	add	r3, r2
 8000522:	4a30      	ldr	r2, [pc, #192]	; (80005e4 <keymap_t_hbuf+0x1b4>)
 8000524:	3358      	adds	r3, #88	; 0x58
 8000526:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800052a:	2b00      	cmp	r3, #0
 800052c:	da00      	bge.n	8000530 <keymap_t_hbuf+0x100>
 800052e:	3307      	adds	r3, #7
 8000530:	10db      	asrs	r3, r3, #3
 8000532:	b21b      	sxth	r3, r3
 8000534:	b29b      	uxth	r3, r3
 8000536:	3301      	adds	r3, #1
 8000538:	b29b      	uxth	r3, r3
 800053a:	81fb      	strh	r3, [r7, #14]
	            bitIndex = (int16_t) (leapmotor_keymap[1][i * 8 + j] % 8);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	00da      	lsls	r2, r3, #3
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <keymap_t_hbuf+0x1b4>)
 8000546:	3358      	adds	r3, #88	; 0x58
 8000548:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800054c:	425a      	negs	r2, r3
 800054e:	f003 0307 	and.w	r3, r3, #7
 8000552:	f002 0207 	and.w	r2, r2, #7
 8000556:	bf58      	it	pl
 8000558:	4253      	negpl	r3, r2
 800055a:	81bb      	strh	r3, [r7, #12]
	            if (bitIndex < 0)
 800055c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	da08      	bge.n	8000576 <keymap_t_hbuf+0x146>
	            {
	                index -= 1;
 8000564:	89fb      	ldrh	r3, [r7, #14]
 8000566:	3b01      	subs	r3, #1
 8000568:	b29b      	uxth	r3, r3
 800056a:	81fb      	strh	r3, [r7, #14]
	                bitIndex += 8;
 800056c:	89bb      	ldrh	r3, [r7, #12]
 800056e:	3308      	adds	r3, #8
 8000570:	b29b      	uxth	r3, r3
 8000572:	81bb      	strh	r3, [r7, #12]
 8000574:	e003      	b.n	800057e <keymap_t_hbuf+0x14e>
	            } else if (index > 100)
 8000576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800057a:	2b64      	cmp	r3, #100	; 0x64
 800057c:	dc1e      	bgt.n	80005bc <keymap_t_hbuf+0x18c>
	                continue;

	            if (debounceBuffer[i] & (0x80 >> j))
 800057e:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <keymap_t_hbuf+0x1b0>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	fa42 f303 	asr.w	r3, r2, r3
 8000590:	400b      	ands	r3, r1
 8000592:	2b00      	cmp	r3, #0
 8000594:	d013      	beq.n	80005be <keymap_t_hbuf+0x18e>
	                hidBuffer[index] |= 1 << (bitIndex); // +1 for Report-ID
 8000596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800059a:	4a14      	ldr	r2, [pc, #80]	; (80005ec <keymap_t_hbuf+0x1bc>)
 800059c:	5cd3      	ldrb	r3, [r2, r3]
 800059e:	b25a      	sxtb	r2, r3
 80005a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005a4:	2101      	movs	r1, #1
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b25a      	sxtb	r2, r3
 80005b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005b4:	b2d1      	uxtb	r1, r2
 80005b6:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <keymap_t_hbuf+0x1bc>)
 80005b8:	54d1      	strb	r1, [r2, r3]
 80005ba:	e000      	b.n	80005be <keymap_t_hbuf+0x18e>
	                continue;
 80005bc:	bf00      	nop
	        for (int j = 0; j < 8; j++)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	dda7      	ble.n	800051a <keymap_t_hbuf+0xea>
		for (int i = 0; i < 2; i++)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3301      	adds	r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	dd9e      	ble.n	8000514 <keymap_t_hbuf+0xe4>

	        }
	    }

}
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000348 	.word	0x20000348
 80005e4:	20000000 	.word	0x20000000
 80005e8:	2000033c 	.word	0x2000033c
 80005ec:	20000354 	.word	0x20000354

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_MspInit+0x5c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_MspInit+0x5c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_MspInit+0x5c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x5c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <HAL_MspInit+0x5c>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x5c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_MspInit+0x60>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_MspInit+0x60>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000
 800065c:	40010000 	.word	0x40010000

08000660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <HAL_SPI_MspInit+0x88>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d12f      	bne.n	80006e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <HAL_SPI_MspInit+0x8c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <HAL_SPI_MspInit+0x8c>)
 8000686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_SPI_MspInit+0x8c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_SPI_MspInit+0x8c>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <HAL_SPI_MspInit+0x8c>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_SPI_MspInit+0x8c>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006b0:	2320      	movs	r3, #32
 80006b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <HAL_SPI_MspInit+0x90>)
 80006c4:	f000 f9e4 	bl	8000a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006c8:	2340      	movs	r3, #64	; 0x40
 80006ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <HAL_SPI_MspInit+0x90>)
 80006dc:	f000 f9d8 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40013000 	.word	0x40013000
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073a:	f000 f87f 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800074a:	f000 fc4e 	bl	8000fea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000830 	.word	0x20000830

08000758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078a:	f7ff ffe5 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f007 f969 	bl	8007a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff fcf9 	bl	8000188 <main>
  bx lr
 8000796:	4770      	bx	lr
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80007a0:	08007b64 	.word	0x08007b64
  ldr r2, =_sbss
 80007a4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80007a8:	20000b44 	.word	0x20000b44

080007ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_2_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_Init+0x28>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x28>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f923 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c6:	200f      	movs	r0, #15
 80007c8:	f000 f808 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007cc:	f7ff ff16 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x54>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x58>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f93b 	bl	8000a76 <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e00e      	b.n	8000828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d80a      	bhi.n	8000826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f000 f903 	bl	8000a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_InitTick+0x5c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000160 	.word	0x20000160
 8000834:	20000168 	.word	0x20000168
 8000838:	20000164 	.word	0x20000164

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <HAL_IncTick+0x20>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20000168 	.word	0x20000168
 800085c:	20000364 	.word	0x20000364

08000860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000364 	.word	0x20000364

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	db0b      	blt.n	8000902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 021f 	and.w	r2, r3, #31
 80008f0:	4906      	ldr	r1, [pc, #24]	; (800090c <__NVIC_EnableIRQ+0x34>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	2001      	movs	r0, #1
 80008fa:	fa00 f202 	lsl.w	r2, r0, r2
 80008fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d8:	d301      	bcc.n	80009de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009da:	2301      	movs	r3, #1
 80009dc:	e00f      	b.n	80009fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <SysTick_Config+0x40>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e6:	210f      	movs	r1, #15
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f7ff ff90 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SysTick_Config+0x40>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SysTick_Config+0x40>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ff2d 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a34:	f7ff ff42 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff ff90 	bl	8000964 <NVIC_EncodePriority>
 8000a44:	4602      	mov	r2, r0
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff5f 	bl	8000910 <__NVIC_SetPriority>
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff35 	bl	80008d8 <__NVIC_EnableIRQ>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffa2 	bl	80009c8 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b08b      	sub	sp, #44	; 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e161      	b.n	8000d68 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 8150 	bne.w	8000d62 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	4a97      	ldr	r2, [pc, #604]	; (8000d24 <HAL_GPIO_Init+0x294>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d05e      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000acc:	4a95      	ldr	r2, [pc, #596]	; (8000d24 <HAL_GPIO_Init+0x294>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d875      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000ad2:	4a95      	ldr	r2, [pc, #596]	; (8000d28 <HAL_GPIO_Init+0x298>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d058      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000ad8:	4a93      	ldr	r2, [pc, #588]	; (8000d28 <HAL_GPIO_Init+0x298>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d86f      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000ade:	4a93      	ldr	r2, [pc, #588]	; (8000d2c <HAL_GPIO_Init+0x29c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d052      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000ae4:	4a91      	ldr	r2, [pc, #580]	; (8000d2c <HAL_GPIO_Init+0x29c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d869      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000aea:	4a91      	ldr	r2, [pc, #580]	; (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d04c      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000af0:	4a8f      	ldr	r2, [pc, #572]	; (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d863      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000af6:	4a8f      	ldr	r2, [pc, #572]	; (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d046      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000afc:	4a8d      	ldr	r2, [pc, #564]	; (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d85d      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d82a      	bhi.n	8000b5c <HAL_GPIO_Init+0xcc>
 8000b06:	2b12      	cmp	r3, #18
 8000b08:	d859      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <HAL_GPIO_Init+0x80>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b8b 	.word	0x08000b8b
 8000b14:	08000b65 	.word	0x08000b65
 8000b18:	08000b77 	.word	0x08000b77
 8000b1c:	08000bb9 	.word	0x08000bb9
 8000b20:	08000bbf 	.word	0x08000bbf
 8000b24:	08000bbf 	.word	0x08000bbf
 8000b28:	08000bbf 	.word	0x08000bbf
 8000b2c:	08000bbf 	.word	0x08000bbf
 8000b30:	08000bbf 	.word	0x08000bbf
 8000b34:	08000bbf 	.word	0x08000bbf
 8000b38:	08000bbf 	.word	0x08000bbf
 8000b3c:	08000bbf 	.word	0x08000bbf
 8000b40:	08000bbf 	.word	0x08000bbf
 8000b44:	08000bbf 	.word	0x08000bbf
 8000b48:	08000bbf 	.word	0x08000bbf
 8000b4c:	08000bbf 	.word	0x08000bbf
 8000b50:	08000bbf 	.word	0x08000bbf
 8000b54:	08000b6d 	.word	0x08000b6d
 8000b58:	08000b81 	.word	0x08000b81
 8000b5c:	4a76      	ldr	r2, [pc, #472]	; (8000d38 <HAL_GPIO_Init+0x2a8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d013      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b62:	e02c      	b.n	8000bbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	623b      	str	r3, [r7, #32]
          break;
 8000b6a:	e029      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	3304      	adds	r3, #4
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e024      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e01f      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	330c      	adds	r3, #12
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e01a      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b92:	2304      	movs	r3, #4
 8000b94:	623b      	str	r3, [r7, #32]
          break;
 8000b96:	e013      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d105      	bne.n	8000bac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	611a      	str	r2, [r3, #16]
          break;
 8000baa:	e009      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bac:	2308      	movs	r3, #8
 8000bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	615a      	str	r2, [r3, #20]
          break;
 8000bb6:	e003      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e000      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          break;
 8000bbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2bff      	cmp	r3, #255	; 0xff
 8000bc4:	d801      	bhi.n	8000bca <HAL_GPIO_Init+0x13a>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	e001      	b.n	8000bce <HAL_GPIO_Init+0x13e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d802      	bhi.n	8000bdc <HAL_GPIO_Init+0x14c>
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x152>
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	3b08      	subs	r3, #8
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	210f      	movs	r1, #15
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	6a39      	ldr	r1, [r7, #32]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 80a9 	beq.w	8000d62 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c10:	4b4a      	ldr	r3, [pc, #296]	; (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a49      	ldr	r2, [pc, #292]	; (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b47      	ldr	r3, [pc, #284]	; (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c28:	4a45      	ldr	r2, [pc, #276]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3d      	ldr	r2, [pc, #244]	; (8000d44 <HAL_GPIO_Init+0x2b4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1e0>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3c      	ldr	r2, [pc, #240]	; (8000d48 <HAL_GPIO_Init+0x2b8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1dc>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3b      	ldr	r2, [pc, #236]	; (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x1e2>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x1e2>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x1e2>
 8000c70:	2300      	movs	r3, #0
 8000c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c82:	492f      	ldr	r1, [pc, #188]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	492b      	ldr	r1, [pc, #172]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	600b      	str	r3, [r1, #0]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000caa:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4927      	ldr	r1, [pc, #156]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4921      	ldr	r1, [pc, #132]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	491d      	ldr	r1, [pc, #116]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	4917      	ldr	r1, [pc, #92]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4913      	ldr	r1, [pc, #76]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d01f      	beq.n	8000d54 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	490d      	ldr	r1, [pc, #52]	; (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60cb      	str	r3, [r1, #12]
 8000d20:	e01f      	b.n	8000d62 <HAL_GPIO_Init+0x2d2>
 8000d22:	bf00      	nop
 8000d24:	10320000 	.word	0x10320000
 8000d28:	10310000 	.word	0x10310000
 8000d2c:	10220000 	.word	0x10220000
 8000d30:	10210000 	.word	0x10210000
 8000d34:	10120000 	.word	0x10120000
 8000d38:	10110000 	.word	0x10110000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_GPIO_Init+0x2f4>)
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4909      	ldr	r1, [pc, #36]	; (8000d84 <HAL_GPIO_Init+0x2f4>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	3301      	adds	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f47f ae96 	bne.w	8000aa4 <HAL_GPIO_Init+0x14>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	372c      	adds	r7, #44	; 0x2c
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
 8000d8c:	af06      	add	r7, sp, #24
 8000d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0fd      	b.n	8000f96 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f006 fbca 	bl	8007548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2203      	movs	r2, #3
 8000db8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f9d5 	bl	8003170 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	687e      	ldr	r6, [r7, #4]
 8000dce:	466d      	mov	r5, sp
 8000dd0:	f106 0410 	add.w	r4, r6, #16
 8000dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	602b      	str	r3, [r5, #0]
 8000ddc:	1d33      	adds	r3, r6, #4
 8000dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de0:	6838      	ldr	r0, [r7, #0]
 8000de2:	f002 f99f 	bl	8003124 <USB_CoreInit>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2202      	movs	r2, #2
 8000df0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e0ce      	b.n	8000f96 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f9d0 	bl	80031a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e04c      	b.n	8000ea4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	b298      	uxth	r0, r3
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	3336      	adds	r3, #54	; 0x36
 8000e48:	4602      	mov	r2, r0
 8000e4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3303      	adds	r3, #3
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3338      	adds	r3, #56	; 0x38
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	333c      	adds	r3, #60	; 0x3c
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	3340      	adds	r3, #64	; 0x40
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	7bfa      	ldrb	r2, [r7, #15]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3ad      	bcc.n	8000e0a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e044      	b.n	8000f3e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000eb4:	7bfa      	ldrb	r2, [r7, #15]
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	440b      	add	r3, r1
 8000eee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d3b5      	bcc.n	8000eb4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	687e      	ldr	r6, [r7, #4]
 8000f50:	466d      	mov	r5, sp
 8000f52:	f106 0410 	add.w	r4, r6, #16
 8000f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	602b      	str	r3, [r5, #0]
 8000f5e:	1d33      	adds	r3, r6, #4
 8000f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f62:	6838      	ldr	r0, [r7, #0]
 8000f64:	f002 f92a 	bl	80031bc <USB_DevInit>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2202      	movs	r2, #2
 8000f72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00d      	b.n	8000f96 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fddc 	bl	8005b4c <USB_DevDisconnect>

  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <HAL_PCD_Start+0x16>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e016      	b.n	8000fe2 <HAL_PCD_Start+0x44>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 f8bf 	bl	8003144 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f006 fd14 	bl	80079f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f004 fdb0 	bl	8005b38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b088      	sub	sp, #32
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 fdb2 	bl	8005b60 <USB_ReadInterrupts>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001006:	d102      	bne.n	800100e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fb48 	bl	800169e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f004 fda4 	bl	8005b60 <USB_ReadInterrupts>
 8001018:	4603      	mov	r3, r0
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001022:	d112      	bne.n	800104a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001036:	b292      	uxth	r2, r2
 8001038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f006 fafe 	bl	800763e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001042:	2100      	movs	r1, #0
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f923 	bl	8001290 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fd86 	bl	8005b60 <USB_ReadInterrupts>
 8001054:	4603      	mov	r3, r0
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800105e:	d10b      	bne.n	8001078 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fd6f 	bl	8005b60 <USB_ReadInterrupts>
 8001082:	4603      	mov	r3, r0
 8001084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108c:	d10b      	bne.n	80010a6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010a0:	b292      	uxth	r2, r2
 80010a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fd58 	bl	8005b60 <USB_ReadInterrupts>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010ba:	d126      	bne.n	800110a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0204 	bic.w	r2, r2, #4
 80010ce:	b292      	uxth	r2, r2
 80010d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0208 	bic.w	r2, r2, #8
 80010e6:	b292      	uxth	r2, r2
 80010e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f006 fadf 	bl	80076b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001104:	b292      	uxth	r2, r2
 8001106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fd26 	bl	8005b60 <USB_ReadInterrupts>
 8001114:	4603      	mov	r3, r0
 8001116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800111a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111e:	f040 8082 	bne.w	8001226 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	77fb      	strb	r3, [r7, #31]
 8001126:	e010      	b.n	800114a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	7ffb      	ldrb	r3, [r7, #31]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	441a      	add	r2, r3
 8001134:	7ffb      	ldrb	r3, [r7, #31]
 8001136:	8812      	ldrh	r2, [r2, #0]
 8001138:	b292      	uxth	r2, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3320      	adds	r3, #32
 800113e:	443b      	add	r3, r7
 8001140:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	3301      	adds	r3, #1
 8001148:	77fb      	strb	r3, [r7, #31]
 800114a:	7ffb      	ldrb	r3, [r7, #31]
 800114c:	2b07      	cmp	r3, #7
 800114e:	d9eb      	bls.n	8001128 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	b292      	uxth	r2, r2
 8001164:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	b292      	uxth	r2, r2
 800117c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001180:	bf00      	nop
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800118a:	b29b      	uxth	r3, r3
 800118c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f6      	beq.n	8001182 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011a6:	b292      	uxth	r2, r2
 80011a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	77fb      	strb	r3, [r7, #31]
 80011b0:	e00f      	b.n	80011d2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	4611      	mov	r1, r2
 80011ba:	7ffa      	ldrb	r2, [r7, #31]
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	440a      	add	r2, r1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	3320      	adds	r3, #32
 80011c4:	443b      	add	r3, r7
 80011c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80011ca:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011cc:	7ffb      	ldrb	r3, [r7, #31]
 80011ce:	3301      	adds	r3, #1
 80011d0:	77fb      	strb	r3, [r7, #31]
 80011d2:	7ffb      	ldrb	r3, [r7, #31]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d9ec      	bls.n	80011b2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001202:	b292      	uxth	r2, r2
 8001204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0204 	orr.w	r2, r2, #4
 800121a:	b292      	uxth	r2, r2
 800121c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f006 fa2b 	bl	800767c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fc98 	bl	8005b60 <USB_ReadInterrupts>
 8001230:	4603      	mov	r3, r0
 8001232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123a:	d10e      	bne.n	800125a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800124e:	b292      	uxth	r2, r2
 8001250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f006 f9e4 	bl	8007622 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f004 fc7e 	bl	8005b60 <USB_ReadInterrupts>
 8001264:	4603      	mov	r3, r0
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126e:	d10b      	bne.n	8001288 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001278:	b29a      	uxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001282:	b292      	uxth	r2, r2
 8001284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_PCD_SetAddress+0x1a>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e013      	b.n	80012d2 <HAL_PCD_SetAddress+0x42>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	78fa      	ldrb	r2, [r7, #3]
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	78fa      	ldrb	r2, [r7, #3]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fc25 	bl	8005b12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	4608      	mov	r0, r1
 80012e4:	4611      	mov	r1, r2
 80012e6:	461a      	mov	r2, r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	70fb      	strb	r3, [r7, #3]
 80012ec:	460b      	mov	r3, r1
 80012ee:	803b      	strh	r3, [r7, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da0e      	bge.n	800131e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2201      	movs	r2, #1
 800131a:	705a      	strb	r2, [r3, #1]
 800131c:	e00e      	b.n	800133c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	f003 0207 	and.w	r2, r3, #7
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	b2da      	uxtb	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001348:	883a      	ldrh	r2, [r7, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	78ba      	ldrb	r2, [r7, #2]
 8001352:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b29a      	uxth	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001366:	78bb      	ldrb	r3, [r7, #2]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d102      	bne.n	8001372 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_PCD_EP_Open+0xa6>
 800137c:	2302      	movs	r3, #2
 800137e:	e00e      	b.n	800139e <HAL_PCD_EP_Open+0xc4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68f9      	ldr	r1, [r7, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f001 ff34 	bl	80031fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800139c:	7afb      	ldrb	r3, [r7, #11]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da0e      	bge.n	80013d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2201      	movs	r2, #1
 80013d4:	705a      	strb	r2, [r3, #1]
 80013d6:	e00e      	b.n	80013f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	f003 0207 	and.w	r2, r3, #7
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_PCD_EP_Close+0x6a>
 800140c:	2302      	movs	r3, #2
 800140e:	e00e      	b.n	800142e <HAL_PCD_EP_Close+0x88>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68f9      	ldr	r1, [r7, #12]
 800141e:	4618      	mov	r0, r3
 8001420:	f002 fa56 	bl	80038d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	460b      	mov	r3, r1
 8001444:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	f003 0207 	and.w	r2, r3, #7
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2200      	movs	r2, #0
 8001474:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	b2da      	uxtb	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6979      	ldr	r1, [r7, #20]
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fc08 	bl	8003ca8 <USB_EPStartXfer>
 8001498:	e005      	b.n	80014a6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6979      	ldr	r1, [r7, #20]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fc01 	bl	8003ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	460b      	mov	r3, r1
 80014be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c0:	7afb      	ldrb	r3, [r7, #11]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2201      	movs	r2, #1
 80014fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	b2da      	uxtb	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001508:	7afb      	ldrb	r3, [r7, #11]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6979      	ldr	r1, [r7, #20]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fbc5 	bl	8003ca8 <USB_EPStartXfer>
 800151e:	e005      	b.n	800152c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6979      	ldr	r1, [r7, #20]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fbbe 	bl	8003ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	f003 0207 	and.w	r2, r3, #7
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d901      	bls.n	8001554 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e04c      	b.n	80015ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da0e      	bge.n	800157a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	705a      	strb	r2, [r3, #1]
 8001578:	e00c      	b.n	8001594 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_PCD_EP_SetStall+0x7e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e01c      	b.n	80015ee <HAL_PCD_EP_SetStall+0xb8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68f9      	ldr	r1, [r7, #12]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 f9a8 	bl	8005918 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f004 facd 	bl	8005b7e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	f003 020f 	and.w	r2, r3, #15
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d901      	bls.n	8001614 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e040      	b.n	8001696 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da0e      	bge.n	800163a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2201      	movs	r2, #1
 8001636:	705a      	strb	r2, [r3, #1]
 8001638:	e00e      	b.n	8001658 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	f003 0207 	and.w	r2, r3, #7
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	b2da      	uxtb	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_PCD_EP_ClrStall+0x82>
 8001674:	2302      	movs	r3, #2
 8001676:	e00e      	b.n	8001696 <HAL_PCD_EP_ClrStall+0xa0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	f004 f996 	bl	80059b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b08e      	sub	sp, #56	; 0x38
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016a6:	e2ec      	b.n	8001c82 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80016be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 8161 	bne.w	800198a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d152      	bne.n	8001778 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e2:	81fb      	strh	r3, [r7, #14]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3328      	adds	r3, #40	; 0x28
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001704:	b29b      	uxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	3302      	adds	r3, #2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	4413      	add	r3, r2
 800171a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	441a      	add	r2, r3
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f005 ff58 	bl	80075ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 829b 	beq.w	8001c82 <PCD_EP_ISR_Handler+0x5e4>
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f040 8296 	bne.w	8001c82 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b292      	uxth	r2, r2
 800176a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001776:	e284      	b.n	8001c82 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001788:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800178a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178e:	2b00      	cmp	r3, #0
 8001790:	d034      	beq.n	80017fc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179a:	b29b      	uxth	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	3306      	adds	r3, #6
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f004 fa24 	bl	8005c1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017e2:	4013      	ands	r3, r2
 80017e4:	823b      	strh	r3, [r7, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	8a3a      	ldrh	r2, [r7, #16]
 80017ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017f0:	b292      	uxth	r2, r2
 80017f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f005 fecd 	bl	8007594 <HAL_PCD_SetupStageCallback>
 80017fa:	e242      	b.n	8001c82 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001800:	2b00      	cmp	r3, #0
 8001802:	f280 823e 	bge.w	8001c82 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b29a      	uxth	r2, r3
 800180e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001812:	4013      	ands	r3, r2
 8001814:	83bb      	strh	r3, [r7, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	8bba      	ldrh	r2, [r7, #28]
 800181c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001820:	b292      	uxth	r2, r2
 8001822:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800182c:	b29b      	uxth	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	3306      	adds	r3, #6
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d019      	beq.n	800188c <PCD_EP_ISR_Handler+0x1ee>
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d015      	beq.n	800188c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	6959      	ldr	r1, [r3, #20]
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001870:	b29b      	uxth	r3, r3
 8001872:	f004 f9d4 	bl	8005c1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	441a      	add	r2, r3
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001884:	2100      	movs	r1, #0
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f005 fe96 	bl	80075b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001898:	2b00      	cmp	r3, #0
 800189a:	f040 81f2 	bne.w	8001c82 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	4413      	add	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d112      	bne.n	80018ec <PCD_EP_ISR_Handler+0x24e>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	801a      	strh	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	e02f      	b.n	800194c <PCD_EP_ISR_Handler+0x2ae>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b3e      	cmp	r3, #62	; 0x3e
 80018f2:	d813      	bhi.n	800191c <PCD_EP_ISR_Handler+0x27e>
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <PCD_EP_ISR_Handler+0x270>
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	3301      	adds	r3, #1
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	b29b      	uxth	r3, r3
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	b29a      	uxth	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	e017      	b.n	800194c <PCD_EP_ISR_Handler+0x2ae>
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <PCD_EP_ISR_Handler+0x298>
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	3b01      	subs	r3, #1
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
 8001936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001938:	b29b      	uxth	r3, r3
 800193a:	029b      	lsls	r3, r3, #10
 800193c:	b29b      	uxth	r3, r3
 800193e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001946:	b29a      	uxth	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195c:	827b      	strh	r3, [r7, #18]
 800195e:	8a7b      	ldrh	r3, [r7, #18]
 8001960:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001964:	827b      	strh	r3, [r7, #18]
 8001966:	8a7b      	ldrh	r3, [r7, #18]
 8001968:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800196c:	827b      	strh	r3, [r7, #18]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	8a7b      	ldrh	r3, [r7, #18]
 8001974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800197c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001984:	b29b      	uxth	r3, r3
 8001986:	8013      	strh	r3, [r2, #0]
 8001988:	e17b      	b.n	8001c82 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800199c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f280 80ea 	bge.w	8001b7a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019bc:	4013      	ands	r3, r2
 80019be:	853b      	strh	r3, [r7, #40]	; 0x28
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019d4:	b292      	uxth	r2, r2
 80019d6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019d8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	7b1b      	ldrb	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d122      	bne.n	8001a3c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3306      	adds	r3, #6
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001a20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8087 	beq.w	8001b36 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	6959      	ldr	r1, [r3, #20]
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	88da      	ldrh	r2, [r3, #6]
 8001a34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a36:	f004 f8f2 	bl	8005c1e <USB_ReadPMA>
 8001a3a:	e07c      	b.n	8001b36 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	78db      	ldrb	r3, [r3, #3]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d108      	bne.n	8001a56 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a46:	461a      	mov	r2, r3
 8001a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f927 	bl	8001c9e <HAL_PCD_EP_DB_Receive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a54:	e06f      	b.n	8001b36 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a70:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	441a      	add	r2, r3
 8001a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d021      	beq.n	8001af4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ada:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d02a      	beq.n	8001b36 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	6959      	ldr	r1, [r3, #20]
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	891a      	ldrh	r2, [r3, #8]
 8001aec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aee:	f004 f896 	bl	8005c1e <USB_ReadPMA>
 8001af2:	e020      	b.n	8001b36 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	3306      	adds	r3, #6
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b1c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	6959      	ldr	r1, [r3, #20]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	895a      	ldrh	r2, [r3, #10]
 8001b30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b32:	f004 f874 	bl	8005c1e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b3c:	441a      	add	r2, r3
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b48:	441a      	add	r2, r3
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <PCD_EP_ISR_Handler+0x4c2>
 8001b56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d206      	bcs.n	8001b6e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f005 fd26 	bl	80075b8 <HAL_PCD_DataOutStageCallback>
 8001b6c:	e005      	b.n	8001b7a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 f897 	bl	8003ca8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d07e      	beq.n	8001c82 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb2:	843b      	strh	r3, [r7, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	441a      	add	r2, r3
 8001bc2:	8c3b      	ldrh	r3, [r7, #32]
 8001bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	78db      	ldrb	r3, [r3, #3]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d00c      	beq.n	8001bf2 <PCD_EP_ISR_Handler+0x554>
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	78db      	ldrb	r3, [r3, #3]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d146      	bne.n	8001c76 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001be8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d141      	bne.n	8001c76 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	3302      	adds	r3, #2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c1a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	8bfb      	ldrh	r3, [r7, #30]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d906      	bls.n	8001c34 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	8bfb      	ldrh	r3, [r7, #30]
 8001c2c:	1ad2      	subs	r2, r2, r3
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	e002      	b.n	8001c3a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f005 fcd0 	bl	80075ee <HAL_PCD_DataInStageCallback>
 8001c4e:	e018      	b.n	8001c82 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	8bfb      	ldrh	r3, [r7, #30]
 8001c56:	441a      	add	r2, r3
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	8bfb      	ldrh	r3, [r7, #30]
 8001c62:	441a      	add	r2, r3
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 f81a 	bl	8003ca8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001c74:	e005      	b.n	8001c82 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f91b 	bl	8001eb8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f6ff ad0a 	blt.w	80016a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3738      	adds	r7, #56	; 0x38
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b088      	sub	sp, #32
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d07e      	beq.n	8001db4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	8b7b      	ldrh	r3, [r7, #26]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d306      	bcc.n	8001cf8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	8b7b      	ldrh	r3, [r7, #26]
 8001cf0:	1ad2      	subs	r2, r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	619a      	str	r2, [r3, #24]
 8001cf6:	e002      	b.n	8001cfe <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d123      	bne.n	8001d4e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d20:	833b      	strh	r3, [r7, #24]
 8001d22:	8b3b      	ldrh	r3, [r7, #24]
 8001d24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d28:	833b      	strh	r3, [r7, #24]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	441a      	add	r2, r3
 8001d38:	8b3b      	ldrh	r3, [r7, #24]
 8001d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01f      	beq.n	8001d98 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d72:	82fb      	strh	r3, [r7, #22]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	441a      	add	r2, r3
 8001d82:	8afb      	ldrh	r3, [r7, #22]
 8001d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d98:	8b7b      	ldrh	r3, [r7, #26]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8087 	beq.w	8001eae <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	6959      	ldr	r1, [r3, #20]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	891a      	ldrh	r2, [r3, #8]
 8001dac:	8b7b      	ldrh	r3, [r7, #26]
 8001dae:	f003 ff36 	bl	8005c1e <USB_ReadPMA>
 8001db2:	e07c      	b.n	8001eae <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3306      	adds	r3, #6
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ddc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	8b7b      	ldrh	r3, [r7, #26]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d306      	bcc.n	8001df6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	8b7b      	ldrh	r3, [r7, #26]
 8001dee:	1ad2      	subs	r2, r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	619a      	str	r2, [r3, #24]
 8001df4:	e002      	b.n	8001dfc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d123      	bne.n	8001e4c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1e:	83fb      	strh	r3, [r7, #30]
 8001e20:	8bfb      	ldrh	r3, [r7, #30]
 8001e22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e26:	83fb      	strh	r3, [r7, #30]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	441a      	add	r2, r3
 8001e36:	8bfb      	ldrh	r3, [r7, #30]
 8001e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d11f      	bne.n	8001e96 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e70:	83bb      	strh	r3, [r7, #28]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	441a      	add	r2, r3
 8001e80:	8bbb      	ldrh	r3, [r7, #28]
 8001e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e96:	8b7b      	ldrh	r3, [r7, #26]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	6959      	ldr	r1, [r3, #20]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	895a      	ldrh	r2, [r3, #10]
 8001ea8:	8b7b      	ldrh	r3, [r7, #26]
 8001eaa:	f003 feb8 	bl	8005c1e <USB_ReadPMA>
    }
  }

  return count;
 8001eae:	8b7b      	ldrh	r3, [r7, #26]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0a2      	sub	sp, #136	; 0x88
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 81c7 	beq.w	8002260 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d907      	bls.n	8001f1a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	619a      	str	r2, [r3, #24]
 8001f18:	e002      	b.n	8001f20 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 80b9 	bne.w	800209c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	785b      	ldrb	r3, [r3, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d126      	bne.n	8001f80 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	4413      	add	r3, r2
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	011a      	lsls	r2, r3, #4
 8001f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f52:	4413      	add	r3, r2
 8001f54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	e01a      	b.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d116      	bne.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9c:	4413      	add	r3, r2
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	011a      	lsls	r2, r3, #4
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	4413      	add	r3, r2
 8001faa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d126      	bne.n	8002012 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4413      	add	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	011a      	lsls	r2, r3, #4
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800200a:	b29a      	uxth	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	801a      	strh	r2, [r3, #0]
 8002010:	e017      	b.n	8002042 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d113      	bne.n	8002042 <HAL_PCD_EP_DB_Transmit+0x18a>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	4413      	add	r3, r2
 800202a:	623b      	str	r3, [r7, #32]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	011a      	lsls	r2, r3, #4
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	4413      	add	r3, r2
 8002036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2200      	movs	r2, #0
 8002040:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4619      	mov	r1, r3
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f005 fad0 	bl	80075ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 82d4 	beq.w	8002602 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002074:	827b      	strh	r3, [r7, #18]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	441a      	add	r2, r3
 8002084:	8a7b      	ldrh	r3, [r7, #18]
 8002086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800208a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800208e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002096:	b29b      	uxth	r3, r3
 8002098:	8013      	strh	r3, [r2, #0]
 800209a:	e2b2      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d021      	beq.n	80020ea <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80020d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	f040 8286 	bne.w	8002602 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020fe:	441a      	add	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800210c:	441a      	add	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	429a      	cmp	r2, r3
 800211c:	d309      	bcc.n	8002132 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212a:	1ad2      	subs	r2, r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	621a      	str	r2, [r3, #32]
 8002130:	e015      	b.n	800215e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800213a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800213e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002148:	e009      	b.n	800215e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d155      	bne.n	8002212 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	63bb      	str	r3, [r7, #56]	; 0x38
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002174:	b29b      	uxth	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217a:	4413      	add	r3, r2
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	011a      	lsls	r2, r3, #4
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	4413      	add	r3, r2
 8002188:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
 800218e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002190:	2b00      	cmp	r3, #0
 8002192:	d112      	bne.n	80021ba <HAL_PCD_EP_DB_Transmit+0x302>
 8002194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800219e:	b29a      	uxth	r2, r3
 80021a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	e047      	b.n	800224a <HAL_PCD_EP_DB_Transmit+0x392>
 80021ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021bc:	2b3e      	cmp	r3, #62	; 0x3e
 80021be:	d811      	bhi.n	80021e4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80021c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80021c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80021d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d2:	3301      	adds	r3, #1
 80021d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80021d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d8:	b29b      	uxth	r3, r3
 80021da:	029b      	lsls	r3, r3, #10
 80021dc:	b29a      	uxth	r2, r3
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	e032      	b.n	800224a <HAL_PCD_EP_DB_Transmit+0x392>
 80021e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <HAL_PCD_EP_DB_Transmit+0x342>
 80021f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f6:	3b01      	subs	r3, #1
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	029b      	lsls	r3, r3, #10
 8002200:	b29b      	uxth	r3, r3
 8002202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800220a:	b29a      	uxth	r2, r3
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	e01b      	b.n	800224a <HAL_PCD_EP_DB_Transmit+0x392>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d117      	bne.n	800224a <HAL_PCD_EP_DB_Transmit+0x392>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	643b      	str	r3, [r7, #64]	; 0x40
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222e:	4413      	add	r3, r2
 8002230:	643b      	str	r3, [r7, #64]	; 0x40
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	011a      	lsls	r2, r3, #4
 8002238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223a:	4413      	add	r3, r2
 800223c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002244:	b29a      	uxth	r2, r3
 8002246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002248:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6959      	ldr	r1, [r3, #20]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	891a      	ldrh	r2, [r3, #8]
 8002256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002258:	b29b      	uxth	r3, r3
 800225a:	f003 fc9b 	bl	8005b94 <USB_WritePMA>
 800225e:	e1d0      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002268:	b29b      	uxth	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	3306      	adds	r3, #6
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002288:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002294:	429a      	cmp	r2, r3
 8002296:	d307      	bcc.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	619a      	str	r2, [r3, #24]
 80022a6:	e002      	b.n	80022ae <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 80c4 	bne.w	8002440 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d126      	bne.n	800230e <HAL_PCD_EP_DB_Transmit+0x456>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d4:	4413      	add	r3, r2
 80022d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	011a      	lsls	r2, r3, #4
 80022de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e0:	4413      	add	r3, r2
 80022e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80022e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022f6:	801a      	strh	r2, [r3, #0]
 80022f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002306:	b29a      	uxth	r2, r3
 8002308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	e01a      	b.n	8002344 <HAL_PCD_EP_DB_Transmit+0x48c>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	785b      	ldrb	r3, [r3, #1]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d116      	bne.n	8002344 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	677b      	str	r3, [r7, #116]	; 0x74
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002324:	b29b      	uxth	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232a:	4413      	add	r3, r2
 800232c:	677b      	str	r3, [r7, #116]	; 0x74
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	011a      	lsls	r2, r3, #4
 8002334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002336:	4413      	add	r3, r2
 8002338:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800233c:	673b      	str	r3, [r7, #112]	; 0x70
 800233e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002340:	2200      	movs	r2, #0
 8002342:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	67bb      	str	r3, [r7, #120]	; 0x78
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d12f      	bne.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800236a:	4413      	add	r3, r2
 800236c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	011a      	lsls	r2, r3, #4
 8002376:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800237a:	4413      	add	r3, r2
 800237c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002390:	b29a      	uxth	r2, r3
 8002392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	e017      	b.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	785b      	ldrb	r3, [r3, #1]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d113      	bne.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c8:	4413      	add	r3, r2
 80023ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	011a      	lsls	r2, r3, #4
 80023d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d4:	4413      	add	r3, r2
 80023d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023de:	2200      	movs	r2, #0
 80023e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f005 f900 	bl	80075ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 8104 	bne.w	8002602 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002414:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	441a      	add	r2, r3
 8002426:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800242a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800242e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243a:	b29b      	uxth	r3, r3
 800243c:	8013      	strh	r3, [r2, #0]
 800243e:	e0e0      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d121      	bne.n	800248e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002464:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	441a      	add	r2, r3
 8002476:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800247a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800247e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248a:	b29b      	uxth	r3, r3
 800248c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 80b4 	bne.w	8002602 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a2:	441a      	add	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024b0:	441a      	add	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d309      	bcc.n	80024d6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ce:	1ad2      	subs	r2, r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	621a      	str	r2, [r3, #32]
 80024d4:	e015      	b.n	8002502 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80024de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024ec:	e009      	b.n	8002502 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	667b      	str	r3, [r7, #100]	; 0x64
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d155      	bne.n	80025bc <HAL_PCD_EP_DB_Transmit+0x704>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251e:	b29b      	uxth	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002524:	4413      	add	r3, r2
 8002526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	011a      	lsls	r2, r3, #4
 800252e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002530:	4413      	add	r3, r2
 8002532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002536:	65bb      	str	r3, [r7, #88]	; 0x58
 8002538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253a:	2b00      	cmp	r3, #0
 800253c:	d112      	bne.n	8002564 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800253e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002548:	b29a      	uxth	r2, r3
 800254a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255c:	b29a      	uxth	r2, r3
 800255e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	e044      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x736>
 8002564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002566:	2b3e      	cmp	r3, #62	; 0x3e
 8002568:	d811      	bhi.n	800258e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800256a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	657b      	str	r3, [r7, #84]	; 0x54
 8002570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800257a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257c:	3301      	adds	r3, #1
 800257e:	657b      	str	r3, [r7, #84]	; 0x54
 8002580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002582:	b29b      	uxth	r3, r3
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	b29a      	uxth	r2, r3
 8002588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	e02f      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x736>
 800258e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	657b      	str	r3, [r7, #84]	; 0x54
 8002594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a0:	3b01      	subs	r3, #1
 80025a2:	657b      	str	r3, [r7, #84]	; 0x54
 80025a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b8:	801a      	strh	r2, [r3, #0]
 80025ba:	e018      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x736>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d114      	bne.n	80025ee <HAL_PCD_EP_DB_Transmit+0x736>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d2:	4413      	add	r3, r2
 80025d4:	667b      	str	r3, [r7, #100]	; 0x64
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	011a      	lsls	r2, r3, #4
 80025dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025de:	4413      	add	r3, r2
 80025e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025e4:	663b      	str	r3, [r7, #96]	; 0x60
 80025e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6959      	ldr	r1, [r3, #20]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	895a      	ldrh	r2, [r3, #10]
 80025fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f003 fac9 	bl	8005b94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800261c:	823b      	strh	r3, [r7, #16]
 800261e:	8a3b      	ldrh	r3, [r7, #16]
 8002620:	f083 0310 	eor.w	r3, r3, #16
 8002624:	823b      	strh	r3, [r7, #16]
 8002626:	8a3b      	ldrh	r3, [r7, #16]
 8002628:	f083 0320 	eor.w	r3, r3, #32
 800262c:	823b      	strh	r3, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	441a      	add	r2, r3
 800263c:	8a3b      	ldrh	r3, [r7, #16]
 800263e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264e:	b29b      	uxth	r3, r3
 8002650:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3788      	adds	r7, #136	; 0x88
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	4613      	mov	r3, r2
 800266c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4413      	add	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e009      	b.n	80026a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002692:	897a      	ldrh	r2, [r7, #10]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026a6:	893b      	ldrh	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2200      	movs	r2, #0
 80026b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	80da      	strh	r2, [r3, #6]
 80026ba:	e00b      	b.n	80026d4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2201      	movs	r2, #1
 80026c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e272      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270c:	4b8f      	ldr	r3, [pc, #572]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
 8002718:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b89      	ldr	r3, [pc, #548]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06c      	beq.n	800280c <HAL_RCC_OscConfig+0x12c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d168      	bne.n	800280c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e24c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x76>
 8002748:	4b80      	ldr	r3, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b7b      	ldr	r3, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7a      	ldr	r2, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b78      	ldr	r3, [pc, #480]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a77      	ldr	r2, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xbc>
 8002782:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 800279c:	4b6b      	ldr	r3, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a67      	ldr	r2, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe f850 	bl	8000860 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe f84c 	bl	8000860 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e200      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5d      	ldr	r3, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe4>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe f83c 	bl	8000860 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe f838 	bl	8000860 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1ec      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x10c>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002826:	4b49      	ldr	r3, [pc, #292]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4939      	ldr	r1, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fd fff1 	bl	8000860 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7fd ffed 	bl	8000860 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1a1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4927      	ldr	r1, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fd ffd0 	bl	8000860 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fd ffcc 	bl	8000860 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e180      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03a      	beq.n	8002964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fd ffb0 	bl	8000860 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fd ffac 	bl	8000860 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e160      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f000 faa6 	bl	8002e74 <RCC_Delay>
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fd ff96 	bl	8000860 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00f      	b.n	8002958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fd ff92 	bl	8000860 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d908      	bls.n	8002958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e146      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	42420000 	.word	0x42420000
 8002954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b92      	ldr	r3, [pc, #584]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e9      	bne.n	8002938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a6 	beq.w	8002abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a87      	ldr	r2, [pc, #540]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]
 800298e:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7e      	ldr	r2, [pc, #504]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7fd ff53 	bl	8000860 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fd ff4f 	bl	8000860 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e103      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b75      	ldr	r3, [pc, #468]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x312>
 80029e4:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e02d      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x334>
 80029fa:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a69      	ldr	r2, [pc, #420]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	e01c      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x356>
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a36:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fd ff03 	bl	8000860 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fd feff 	bl	8000860 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0b1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x37e>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fd feed 	bl	8000860 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fd fee9 	bl	8000860 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e09b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8087 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d061      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d146      	bne.n	8002b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fd febd 	bl	8000860 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fd feb9 	bl	8000860 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e06d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4921      	ldr	r1, [pc, #132]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a19      	ldr	r1, [r3, #32]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	430b      	orrs	r3, r1
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fd fe8d 	bl	8000860 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fd fe89 	bl	8000860 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e03d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46a>
 8002b68:	e035      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fd fe76 	bl	8000860 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fd fe72 	bl	8000860 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x498>
 8002b96:	e01e      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e019      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_OscConfig+0x500>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d0      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4965      	ldr	r1, [pc, #404]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d040      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d115      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e073      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4936      	ldr	r1, [pc, #216]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7fd fdc4 	bl	8000860 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fd fdc0 	bl	8000860 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e053      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d210      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fd22 	bl	80007dc <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08007b4c 	.word	0x08007b4c
 8002db0:	20000160 	.word	0x20000160
 8002db4:	20000164 	.word	0x20000164

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b490      	push	{r4, r7}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dbe:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xac>)
 8002dc0:	1d3c      	adds	r4, r7, #4
 8002dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dc8:	f240 2301 	movw	r3, #513	; 0x201
 8002dcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002de2:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d002      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x40>
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0x46>
 8002df6:	e02b      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dfa:	623b      	str	r3, [r7, #32]
      break;
 8002dfc:	e02b      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	0c9b      	lsrs	r3, r3, #18
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3328      	adds	r3, #40	; 0x28
 8002e08:	443b      	add	r3, r7
 8002e0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e0e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0c5b      	lsrs	r3, r3, #17
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	3328      	adds	r3, #40	; 0x28
 8002e26:	443b      	add	r3, r7
 8002e28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e32:	fb03 f202 	mul.w	r2, r3, r2
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	e004      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	623b      	str	r3, [r7, #32]
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e52:	623b      	str	r3, [r7, #32]
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	; 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc90      	pop	{r4, r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	08007af0 	.word	0x08007af0
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	007a1200 	.word	0x007a1200
 8002e70:	003d0900 	.word	0x003d0900

08002e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <RCC_Delay+0x34>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <RCC_Delay+0x38>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0a5b      	lsrs	r3, r3, #9
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e90:	bf00      	nop
  }
  while (Delay --);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	60fa      	str	r2, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f9      	bne.n	8002e90 <RCC_Delay+0x1c>
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	20000160 	.word	0x20000160
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d07d      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10d      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	4b49      	ldr	r3, [pc, #292]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d118      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f10:	f7fd fca6 	bl	8000860 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	e008      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f18:	f7fd fca2 	bl	8000860 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e06d      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d02e      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d027      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f54:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f6a:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d014      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fc71 	bl	8000860 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fd fc6d 	bl	8000860 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e036      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ee      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4917      	ldr	r1, [pc, #92]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	490b      	ldr	r1, [pc, #44]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4904      	ldr	r1, [pc, #16]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
 8003018:	42420440 	.word	0x42420440

0800301c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e076      	b.n	800311c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800303e:	d009      	beq.n	8003054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
 8003046:	e005      	b.n	8003054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd faf6 	bl	8000660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800308a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	ea42 0103 	orr.w	r1, r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	0c1a      	lsrs	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f002 0204 	and.w	r2, r2, #4
 80030fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003124:	b084      	sub	sp, #16
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	f107 0014 	add.w	r0, r7, #20
 8003132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	b004      	add	sp, #16
 8003142:	4770      	bx	lr

08003144 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003154:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003158:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003178:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800317c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	b29b      	uxth	r3, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	4013      	ands	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80031bc:	b084      	sub	sp, #16
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	f107 0014 	add.w	r0, r7, #20
 80031ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	b004      	add	sp, #16
 80031fa:	4770      	bx	lr

080031fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b09b      	sub	sp, #108	; 0x6c
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	78db      	ldrb	r3, [r3, #3]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d81f      	bhi.n	800326e <USB_ActivateEndpoint+0x72>
 800322e:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <USB_ActivateEndpoint+0x38>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003245 	.word	0x08003245
 8003238:	08003261 	.word	0x08003261
 800323c:	08003277 	.word	0x08003277
 8003240:	08003253 	.word	0x08003253
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003244:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003250:	e012      	b.n	8003278 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003252:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003256:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800325a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800325e:	e00b      	b.n	8003278 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003268:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800326c:	e004      	b.n	8003278 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003274:	e000      	b.n	8003278 <USB_ActivateEndpoint+0x7c>
      break;
 8003276:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003296:	b29b      	uxth	r3, r3
 8003298:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	441a      	add	r2, r3
 80032c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80032cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032dc:	b29b      	uxth	r3, r3
 80032de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	7b1b      	ldrb	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8149 	bne.w	800357c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8084 	beq.w	80033fc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4413      	add	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	011a      	lsls	r2, r3, #4
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	88db      	ldrh	r3, [r3, #6]
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	b29b      	uxth	r3, r3
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	81fb      	strh	r3, [r7, #14]
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01b      	beq.n	8003378 <USB_ActivateEndpoint+0x17c>
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	81bb      	strh	r3, [r7, #12]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	89bb      	ldrh	r3, [r7, #12]
 8003364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003370:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003374:	b29b      	uxth	r3, r3
 8003376:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	78db      	ldrb	r3, [r3, #3]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d020      	beq.n	80033c2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003396:	813b      	strh	r3, [r7, #8]
 8003398:	893b      	ldrh	r3, [r7, #8]
 800339a:	f083 0320 	eor.w	r3, r3, #32
 800339e:	813b      	strh	r3, [r7, #8]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	441a      	add	r2, r3
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033bc:	b29b      	uxth	r3, r3
 80033be:	8013      	strh	r3, [r2, #0]
 80033c0:	e27f      	b.n	80038c2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d8:	817b      	strh	r3, [r7, #10]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	897b      	ldrh	r3, [r7, #10]
 80033e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	8013      	strh	r3, [r2, #0]
 80033fa:	e262      	b.n	80038c2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	4413      	add	r3, r2
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	011a      	lsls	r2, r3, #4
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	4413      	add	r3, r2
 800341a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	88db      	ldrh	r3, [r3, #6]
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	b29b      	uxth	r3, r3
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	4413      	add	r3, r2
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	011a      	lsls	r2, r3, #4
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	4413      	add	r3, r2
 800344e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d112      	bne.n	8003482 <USB_ActivateEndpoint+0x286>
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003466:	b29a      	uxth	r2, r3
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	801a      	strh	r2, [r3, #0]
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347a:	b29a      	uxth	r2, r3
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	e02f      	b.n	80034e2 <USB_ActivateEndpoint+0x2e6>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b3e      	cmp	r3, #62	; 0x3e
 8003488:	d813      	bhi.n	80034b2 <USB_ActivateEndpoint+0x2b6>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	663b      	str	r3, [r7, #96]	; 0x60
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <USB_ActivateEndpoint+0x2a8>
 800349e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a0:	3301      	adds	r3, #1
 80034a2:	663b      	str	r3, [r7, #96]	; 0x60
 80034a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	029b      	lsls	r3, r3, #10
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	801a      	strh	r2, [r3, #0]
 80034b0:	e017      	b.n	80034e2 <USB_ActivateEndpoint+0x2e6>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	663b      	str	r3, [r7, #96]	; 0x60
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <USB_ActivateEndpoint+0x2d0>
 80034c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c8:	3b01      	subs	r3, #1
 80034ca:	663b      	str	r3, [r7, #96]	; 0x60
 80034cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	029b      	lsls	r3, r3, #10
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034dc:	b29a      	uxth	r2, r3
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	83fb      	strh	r3, [r7, #30]
 80034f0:	8bfb      	ldrh	r3, [r7, #30]
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01b      	beq.n	8003532 <USB_ActivateEndpoint+0x336>
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003510:	83bb      	strh	r3, [r7, #28]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	441a      	add	r2, r3
 800351c:	8bbb      	ldrh	r3, [r7, #28]
 800351e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800352a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352e:	b29b      	uxth	r3, r3
 8003530:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	837b      	strh	r3, [r7, #26]
 800354a:	8b7b      	ldrh	r3, [r7, #26]
 800354c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003550:	837b      	strh	r3, [r7, #26]
 8003552:	8b7b      	ldrh	r3, [r7, #26]
 8003554:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003558:	837b      	strh	r3, [r7, #26]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	8b7b      	ldrh	r3, [r7, #26]
 8003566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003576:	b29b      	uxth	r3, r3
 8003578:	8013      	strh	r3, [r2, #0]
 800357a:	e1a2      	b.n	80038c2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	441a      	add	r2, r3
 80035a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c8:	4413      	add	r3, r2
 80035ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	011a      	lsls	r2, r3, #4
 80035d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035da:	657b      	str	r3, [r7, #84]	; 0x54
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	891b      	ldrh	r3, [r3, #8]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ea:	801a      	strh	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	653b      	str	r3, [r7, #80]	; 0x50
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fc:	4413      	add	r3, r2
 80035fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	011a      	lsls	r2, r3, #4
 8003606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003608:	4413      	add	r3, r2
 800360a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800360e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	895b      	ldrh	r3, [r3, #10]
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f040 8091 	bne.w	800374c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003638:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800363a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <USB_ActivateEndpoint+0x47e>
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	877b      	strh	r3, [r7, #58]	; 0x3a
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	441a      	add	r2, r3
 8003664:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800366a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800366e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003676:	b29b      	uxth	r3, r3
 8003678:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	873b      	strh	r3, [r7, #56]	; 0x38
 8003688:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01b      	beq.n	80036ca <USB_ActivateEndpoint+0x4ce>
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80036e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80036e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80036ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80036ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	441a      	add	r2, r3
 80036fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80036fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370e:	b29b      	uxth	r3, r3
 8003710:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003728:	867b      	strh	r3, [r7, #50]	; 0x32
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	441a      	add	r2, r3
 8003734:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003746:	b29b      	uxth	r3, r3
 8003748:	8013      	strh	r3, [r2, #0]
 800374a:	e0ba      	b.n	80038c2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800375c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01d      	beq.n	80037a4 <USB_ActivateEndpoint+0x5a8>
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800379c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80037b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01d      	beq.n	80037fc <USB_ActivateEndpoint+0x600>
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	441a      	add	r2, r3
 80037e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	78db      	ldrb	r3, [r3, #3]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d024      	beq.n	800384e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800381e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003822:	f083 0320 	eor.w	r3, r3, #32
 8003826:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	441a      	add	r2, r3
 8003834:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800383c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003848:	b29b      	uxth	r3, r3
 800384a:	8013      	strh	r3, [r2, #0]
 800384c:	e01d      	b.n	800388a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003864:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	441a      	add	r2, r3
 8003872:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800387a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800387e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003886:	b29b      	uxth	r3, r3
 8003888:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800389c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	441a      	add	r2, r3
 80038ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80038ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038be:	b29b      	uxth	r3, r3
 80038c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80038c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	376c      	adds	r7, #108	; 0x6c
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b08d      	sub	sp, #52	; 0x34
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	7b1b      	ldrb	r3, [r3, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 808e 	bne.w	8003a00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d044      	beq.n	8003976 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	81bb      	strh	r3, [r7, #12]
 80038fa:	89bb      	ldrh	r3, [r7, #12]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01b      	beq.n	800393c <USB_DeactivateEndpoint+0x6c>
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	817b      	strh	r3, [r7, #10]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800392c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003938:	b29b      	uxth	r3, r3
 800393a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003952:	813b      	strh	r3, [r7, #8]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	893b      	ldrh	r3, [r7, #8]
 8003960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	b29b      	uxth	r3, r3
 8003972:	8013      	strh	r3, [r2, #0]
 8003974:	e192      	b.n	8003c9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	827b      	strh	r3, [r7, #18]
 8003984:	8a7b      	ldrh	r3, [r7, #18]
 8003986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01b      	beq.n	80039c6 <USB_DeactivateEndpoint+0xf6>
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	823b      	strh	r3, [r7, #16]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	441a      	add	r2, r3
 80039b0:	8a3b      	ldrh	r3, [r7, #16]
 80039b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039dc:	81fb      	strh	r3, [r7, #14]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	441a      	add	r2, r3
 80039e8:	89fb      	ldrh	r3, [r7, #14]
 80039ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	8013      	strh	r3, [r2, #0]
 80039fe:	e14d      	b.n	8003c9c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 80a5 	bne.w	8003b54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	843b      	strh	r3, [r7, #32]
 8003a18:	8c3b      	ldrh	r3, [r7, #32]
 8003a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01b      	beq.n	8003a5a <USB_DeactivateEndpoint+0x18a>
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a38:	83fb      	strh	r3, [r7, #30]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	441a      	add	r2, r3
 8003a44:	8bfb      	ldrh	r3, [r7, #30]
 8003a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	83bb      	strh	r3, [r7, #28]
 8003a68:	8bbb      	ldrh	r3, [r7, #28]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01b      	beq.n	8003aaa <USB_DeactivateEndpoint+0x1da>
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a88:	837b      	strh	r3, [r7, #26]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	441a      	add	r2, r3
 8003a94:	8b7b      	ldrh	r3, [r7, #26]
 8003a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	833b      	strh	r3, [r7, #24]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	8b3b      	ldrh	r3, [r7, #24]
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ada:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	82fb      	strh	r3, [r7, #22]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	8afb      	ldrh	r3, [r7, #22]
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b30:	82bb      	strh	r3, [r7, #20]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	441a      	add	r2, r3
 8003b3c:	8abb      	ldrh	r3, [r7, #20]
 8003b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	8013      	strh	r3, [r2, #0]
 8003b52:	e0a3      	b.n	8003c9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01b      	beq.n	8003ba4 <USB_DeactivateEndpoint+0x2d4>
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	441a      	add	r2, r3
 8003b8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003bb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01b      	beq.n	8003bf4 <USB_DeactivateEndpoint+0x324>
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	441a      	add	r2, r3
 8003bde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3734      	adds	r7, #52	; 0x34
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b0cc      	sub	sp, #304	; 0x130
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003cb6:	6018      	str	r0, [r3, #0]
 8003cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cc0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	f041 817d 	bne.w	8004fce <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d908      	bls.n	8003d02 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003d00:	e007      	b.n	8003d12 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	7b1b      	ldrb	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d152      	bne.n	8003dc8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6959      	ldr	r1, [r3, #20]
 8003d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	88da      	ldrh	r2, [r3, #6]
 8003d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003d44:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003d48:	6800      	ldr	r0, [r0, #0]
 8003d4a:	f001 ff23 	bl	8005b94 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003d5a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	4619      	mov	r1, r3
 8003d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003d80:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	440a      	add	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	011a      	lsls	r2, r3, #4
 8003d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4413      	add	r3, r2
 8003da4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dbc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	f001 b8b5 	b.w	8004f32 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	78db      	ldrb	r3, [r3, #3]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	f040 84c6 	bne.w	8004766 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	f240 8443 	bls.w	800467e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e64:	1ad2      	subs	r2, r2, r3
 8003e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 823e 	beq.w	8004316 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ea2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003ea6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	785b      	ldrb	r3, [r3, #1]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 809a 	bne.w	8003ff4 <USB_EPStartXfer+0x34c>
 8003ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ec8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003ecc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003ef2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	440a      	add	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	011a      	lsls	r2, r3, #4
 8003f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d122      	bne.n	8003f72 <USB_EPStartXfer+0x2ca>
 8003f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	e079      	b.n	8004066 <USB_EPStartXfer+0x3be>
 8003f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f76:	2b3e      	cmp	r3, #62	; 0x3e
 8003f78:	d81b      	bhi.n	8003fb2 <USB_EPStartXfer+0x30a>
 8003f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <USB_EPStartXfer+0x2f2>
 8003f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f94:	3301      	adds	r3, #1
 8003f96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	029b      	lsls	r3, r3, #10
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fa8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e059      	b.n	8004066 <USB_EPStartXfer+0x3be>
 8003fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <USB_EPStartXfer+0x32a>
 8003fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	029b      	lsls	r3, r3, #10
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	e038      	b.n	8004066 <USB_EPStartXfer+0x3be>
 8003ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	785b      	ldrb	r3, [r3, #1]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d130      	bne.n	8004066 <USB_EPStartXfer+0x3be>
 8004004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004012:	b29b      	uxth	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800401a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800401e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004022:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	440a      	add	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	011a      	lsls	r2, r3, #4
 800403a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800403e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4413      	add	r3, r2
 8004046:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800404a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800404e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004058:	b29a      	uxth	r2, r3
 800405a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800405e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800406a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	895b      	ldrh	r3, [r3, #10]
 8004072:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800407a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6959      	ldr	r1, [r3, #20]
 8004082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004086:	b29b      	uxth	r3, r3
 8004088:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800408c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004090:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004094:	6800      	ldr	r0, [r0, #0]
 8004096:	f001 fd7d 	bl	8005b94 <USB_WritePMA>
            ep->xfer_buff += len;
 800409a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800409e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040aa:	441a      	add	r2, r3
 80040ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80040b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a1a      	ldr	r2, [r3, #32]
 80040c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d90f      	bls.n	80040f4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80040d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e4:	1ad2      	subs	r2, r2, r3
 80040e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	621a      	str	r2, [r3, #32]
 80040f2:	e00e      	b.n	8004112 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80040f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 809a 	bne.w	8004258 <USB_EPStartXfer+0x5b0>
 8004124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004128:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800412c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004130:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004146:	b29b      	uxth	r3, r3
 8004148:	4619      	mov	r1, r3
 800414a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800414e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004152:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004156:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	440a      	add	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	011a      	lsls	r2, r3, #4
 800416e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004172:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4413      	add	r3, r2
 800417a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800417e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004182:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d122      	bne.n	80041d6 <USB_EPStartXfer+0x52e>
 8004190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004194:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	801a      	strh	r2, [r3, #0]
 80041b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	e083      	b.n	80042de <USB_EPStartXfer+0x636>
 80041d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041da:	2b3e      	cmp	r3, #62	; 0x3e
 80041dc:	d81b      	bhi.n	8004216 <USB_EPStartXfer+0x56e>
 80041de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d004      	beq.n	80041fe <USB_EPStartXfer+0x556>
 80041f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041f8:	3301      	adds	r3, #1
 80041fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004202:	b29b      	uxth	r3, r3
 8004204:	029b      	lsls	r3, r3, #10
 8004206:	b29a      	uxth	r2, r3
 8004208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	e063      	b.n	80042de <USB_EPStartXfer+0x636>
 8004216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <USB_EPStartXfer+0x58e>
 800422c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004230:	3b01      	subs	r3, #1
 8004232:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004236:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800423a:	b29b      	uxth	r3, r3
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	b29b      	uxth	r3, r3
 8004240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004248:	b29a      	uxth	r2, r3
 800424a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800424e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	e042      	b.n	80042de <USB_EPStartXfer+0x636>
 8004258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800425c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	785b      	ldrb	r3, [r3, #1]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d13a      	bne.n	80042de <USB_EPStartXfer+0x636>
 8004268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004270:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004274:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800428a:	b29b      	uxth	r3, r3
 800428c:	4619      	mov	r1, r3
 800428e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004292:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004296:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800429a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	440a      	add	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	011a      	lsls	r2, r3, #4
 80042b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80042c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80042de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	891b      	ldrh	r3, [r3, #8]
 80042ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6959      	ldr	r1, [r3, #20]
 80042fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004304:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004308:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800430c:	6800      	ldr	r0, [r0, #0]
 800430e:	f001 fc41 	bl	8005b94 <USB_WritePMA>
 8004312:	f000 be0e 	b.w	8004f32 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800431a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d16d      	bne.n	8004402 <USB_EPStartXfer+0x75a>
 8004326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800432a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
 8004332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004346:	4413      	add	r3, r2
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
 800434a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800434e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	011a      	lsls	r2, r3, #4
 8004358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435a:	4413      	add	r3, r2
 800435c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004360:	647b      	str	r3, [r7, #68]	; 0x44
 8004362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d112      	bne.n	8004390 <USB_EPStartXfer+0x6e8>
 800436a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004374:	b29a      	uxth	r2, r3
 8004376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004378:	801a      	strh	r2, [r3, #0]
 800437a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004388:	b29a      	uxth	r2, r3
 800438a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	e063      	b.n	8004458 <USB_EPStartXfer+0x7b0>
 8004390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004394:	2b3e      	cmp	r3, #62	; 0x3e
 8004396:	d817      	bhi.n	80043c8 <USB_EPStartXfer+0x720>
 8004398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d004      	beq.n	80043b8 <USB_EPStartXfer+0x710>
 80043ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043b2:	3301      	adds	r3, #1
 80043b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043bc:	b29b      	uxth	r3, r3
 80043be:	029b      	lsls	r3, r3, #10
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e047      	b.n	8004458 <USB_EPStartXfer+0x7b0>
 80043c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <USB_EPStartXfer+0x740>
 80043de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043e2:	3b01      	subs	r3, #1
 80043e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	029b      	lsls	r3, r3, #10
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	e02a      	b.n	8004458 <USB_EPStartXfer+0x7b0>
 8004402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d122      	bne.n	8004458 <USB_EPStartXfer+0x7b0>
 8004412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	653b      	str	r3, [r7, #80]	; 0x50
 800441e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442c:	b29b      	uxth	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004432:	4413      	add	r3, r2
 8004434:	653b      	str	r3, [r7, #80]	; 0x50
 8004436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	011a      	lsls	r2, r3, #4
 8004444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004446:	4413      	add	r3, r2
 8004448:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800444c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800444e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004452:	b29a      	uxth	r2, r3
 8004454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004456:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	891b      	ldrh	r3, [r3, #8]
 8004464:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6959      	ldr	r1, [r3, #20]
 8004474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004478:	b29b      	uxth	r3, r3
 800447a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800447e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004482:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004486:	6800      	ldr	r0, [r0, #0]
 8004488:	f001 fb84 	bl	8005b94 <USB_WritePMA>
            ep->xfer_buff += len;
 800448c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800449c:	441a      	add	r2, r3
 800449e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80044aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d90f      	bls.n	80044e6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80044c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6a1a      	ldr	r2, [r3, #32]
 80044d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d6:	1ad2      	subs	r2, r2, r3
 80044d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	621a      	str	r2, [r3, #32]
 80044e4:	e00e      	b.n	8004504 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80044e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80044f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2200      	movs	r2, #0
 8004502:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	643b      	str	r3, [r7, #64]	; 0x40
 8004510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d16d      	bne.n	80045fc <USB_EPStartXfer+0x954>
 8004520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	63bb      	str	r3, [r7, #56]	; 0x38
 800452c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	4413      	add	r3, r2
 8004542:	63bb      	str	r3, [r7, #56]	; 0x38
 8004544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	011a      	lsls	r2, r3, #4
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	4413      	add	r3, r2
 8004556:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d112      	bne.n	800458a <USB_EPStartXfer+0x8e2>
 8004564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800456e:	b29a      	uxth	r2, r3
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	801a      	strh	r2, [r3, #0]
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004582:	b29a      	uxth	r2, r3
 8004584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	e05d      	b.n	8004646 <USB_EPStartXfer+0x99e>
 800458a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800458e:	2b3e      	cmp	r3, #62	; 0x3e
 8004590:	d817      	bhi.n	80045c2 <USB_EPStartXfer+0x91a>
 8004592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800459c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <USB_EPStartXfer+0x90a>
 80045a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045ac:	3301      	adds	r3, #1
 80045ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	029b      	lsls	r3, r3, #10
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	e041      	b.n	8004646 <USB_EPStartXfer+0x99e>
 80045c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <USB_EPStartXfer+0x93a>
 80045d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045dc:	3b01      	subs	r3, #1
 80045de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	029b      	lsls	r3, r3, #10
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f8:	801a      	strh	r2, [r3, #0]
 80045fa:	e024      	b.n	8004646 <USB_EPStartXfer+0x99e>
 80045fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d11c      	bne.n	8004646 <USB_EPStartXfer+0x99e>
 800460c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004620:	4413      	add	r3, r2
 8004622:	643b      	str	r3, [r7, #64]	; 0x40
 8004624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	011a      	lsls	r2, r3, #4
 8004632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004634:	4413      	add	r3, r2
 8004636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004640:	b29a      	uxth	r2, r3
 8004642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004644:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800464a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	895b      	ldrh	r3, [r3, #10]
 8004652:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6959      	ldr	r1, [r3, #20]
 8004662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004666:	b29b      	uxth	r3, r3
 8004668:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800466c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004670:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004674:	6800      	ldr	r0, [r0, #0]
 8004676:	f001 fa8d 	bl	8005b94 <USB_WritePMA>
 800467a:	f000 bc5a 	b.w	8004f32 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800467e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800468e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800469c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80046b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004704:	b29b      	uxth	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470a:	4413      	add	r3, r2
 800470c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800470e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	011a      	lsls	r2, r3, #4
 800471c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471e:	4413      	add	r3, r2
 8004720:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004724:	65bb      	str	r3, [r7, #88]	; 0x58
 8004726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472a:	b29a      	uxth	r2, r3
 800472c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800472e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	891b      	ldrh	r3, [r3, #8]
 800473c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6959      	ldr	r1, [r3, #20]
 800474c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004750:	b29b      	uxth	r3, r3
 8004752:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004756:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800475a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800475e:	6800      	ldr	r0, [r0, #0]
 8004760:	f001 fa18 	bl	8005b94 <USB_WritePMA>
 8004764:	e3e5      	b.n	8004f32 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80047c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 81bc 	beq.w	8004b80 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d16d      	bne.n	8004902 <USB_EPStartXfer+0xc5a>
 8004826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800482a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	67bb      	str	r3, [r7, #120]	; 0x78
 8004832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004840:	b29b      	uxth	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004846:	4413      	add	r3, r2
 8004848:	67bb      	str	r3, [r7, #120]	; 0x78
 800484a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	011a      	lsls	r2, r3, #4
 8004858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485a:	4413      	add	r3, r2
 800485c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004860:	677b      	str	r3, [r7, #116]	; 0x74
 8004862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d112      	bne.n	8004890 <USB_EPStartXfer+0xbe8>
 800486a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004874:	b29a      	uxth	r2, r3
 8004876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004888:	b29a      	uxth	r2, r3
 800488a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	e060      	b.n	8004952 <USB_EPStartXfer+0xcaa>
 8004890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004894:	2b3e      	cmp	r3, #62	; 0x3e
 8004896:	d817      	bhi.n	80048c8 <USB_EPStartXfer+0xc20>
 8004898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80048a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <USB_EPStartXfer+0xc10>
 80048ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048b2:	3301      	adds	r3, #1
 80048b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80048b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048bc:	b29b      	uxth	r3, r3
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	e044      	b.n	8004952 <USB_EPStartXfer+0xcaa>
 80048c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80048d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <USB_EPStartXfer+0xc40>
 80048de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048e2:	3b01      	subs	r3, #1
 80048e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80048e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	029b      	lsls	r3, r3, #10
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	e027      	b.n	8004952 <USB_EPStartXfer+0xcaa>
 8004902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d11f      	bne.n	8004952 <USB_EPStartXfer+0xcaa>
 8004912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004928:	4413      	add	r3, r2
 800492a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800492e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	011a      	lsls	r2, r3, #4
 800493c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004940:	4413      	add	r3, r2
 8004942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800494c:	b29a      	uxth	r2, r3
 800494e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004950:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	895b      	ldrh	r3, [r3, #10]
 800495e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6959      	ldr	r1, [r3, #20]
 800496e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004972:	b29b      	uxth	r3, r3
 8004974:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004978:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800497c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004980:	6800      	ldr	r0, [r0, #0]
 8004982:	f001 f907 	bl	8005b94 <USB_WritePMA>
          ep->xfer_buff += len;
 8004986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004996:	441a      	add	r2, r3
 8004998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80049a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d90f      	bls.n	80049e0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80049c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d0:	1ad2      	subs	r2, r2, r3
 80049d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	621a      	str	r2, [r3, #32]
 80049de:	e00e      	b.n	80049fe <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80049e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80049f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80049fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8295 	beq.w	8004f32 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d16d      	bne.n	8004af4 <USB_EPStartXfer+0xe4c>
 8004a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a38:	4413      	add	r3, r2
 8004a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	011a      	lsls	r2, r3, #4
 8004a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a52:	667b      	str	r3, [r7, #100]	; 0x64
 8004a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d112      	bne.n	8004a82 <USB_EPStartXfer+0xdda>
 8004a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	e063      	b.n	8004b4a <USB_EPStartXfer+0xea2>
 8004a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a86:	2b3e      	cmp	r3, #62	; 0x3e
 8004a88:	d817      	bhi.n	8004aba <USB_EPStartXfer+0xe12>
 8004a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <USB_EPStartXfer+0xe02>
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	e047      	b.n	8004b4a <USB_EPStartXfer+0xea2>
 8004aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <USB_EPStartXfer+0xe32>
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	029b      	lsls	r3, r3, #10
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	e02a      	b.n	8004b4a <USB_EPStartXfer+0xea2>
 8004af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d122      	bne.n	8004b4a <USB_EPStartXfer+0xea2>
 8004b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b24:	4413      	add	r3, r2
 8004b26:	673b      	str	r3, [r7, #112]	; 0x70
 8004b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	011a      	lsls	r2, r3, #4
 8004b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b38:	4413      	add	r3, r2
 8004b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	891b      	ldrh	r3, [r3, #8]
 8004b56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6959      	ldr	r1, [r3, #20]
 8004b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b78:	6800      	ldr	r0, [r0, #0]
 8004b7a:	f001 f80b 	bl	8005b94 <USB_WritePMA>
 8004b7e:	e1d8      	b.n	8004f32 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d178      	bne.n	8004c82 <USB_EPStartXfer+0xfda>
 8004b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	011a      	lsls	r2, r3, #4
 8004bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bcc:	4413      	add	r3, r2
 8004bce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d116      	bne.n	8004c0c <USB_EPStartXfer+0xf64>
 8004bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e06b      	b.n	8004ce4 <USB_EPStartXfer+0x103c>
 8004c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c10:	2b3e      	cmp	r3, #62	; 0x3e
 8004c12:	d818      	bhi.n	8004c46 <USB_EPStartXfer+0xf9e>
 8004c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <USB_EPStartXfer+0xf8c>
 8004c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c42:	801a      	strh	r2, [r3, #0]
 8004c44:	e04e      	b.n	8004ce4 <USB_EPStartXfer+0x103c>
 8004c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <USB_EPStartXfer+0xfbe>
 8004c5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c60:	3b01      	subs	r3, #1
 8004c62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	029b      	lsls	r3, r3, #10
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	e030      	b.n	8004ce4 <USB_EPStartXfer+0x103c>
 8004c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d128      	bne.n	8004ce4 <USB_EPStartXfer+0x103c>
 8004c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	011a      	lsls	r2, r3, #4
 8004cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cce:	4413      	add	r3, r2
 8004cd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ce2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	891b      	ldrh	r3, [r3, #8]
 8004cf0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6959      	ldr	r1, [r3, #20]
 8004d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d0a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d0e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d12:	6800      	ldr	r0, [r0, #0]
 8004d14:	f000 ff3e 	bl	8005b94 <USB_WritePMA>
          ep->xfer_buff += len;
 8004d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d28:	441a      	add	r2, r3
 8004d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6a1a      	ldr	r2, [r3, #32]
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d90f      	bls.n	8004d72 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d62:	1ad2      	subs	r2, r2, r3
 8004d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	621a      	str	r2, [r3, #32]
 8004d70:	e00e      	b.n	8004d90 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8004d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80cc 	beq.w	8004f32 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d178      	bne.n	8004eaa <USB_EPStartXfer+0x1202>
 8004db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ddc:	4413      	add	r3, r2
 8004dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	011a      	lsls	r2, r3, #4
 8004df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004df4:	4413      	add	r3, r2
 8004df6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d116      	bne.n	8004e34 <USB_EPStartXfer+0x118c>
 8004e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e18:	801a      	strh	r2, [r3, #0]
 8004e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	e064      	b.n	8004efe <USB_EPStartXfer+0x1256>
 8004e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e38:	2b3e      	cmp	r3, #62	; 0x3e
 8004e3a:	d818      	bhi.n	8004e6e <USB_EPStartXfer+0x11c6>
 8004e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <USB_EPStartXfer+0x11b4>
 8004e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e56:	3301      	adds	r3, #1
 8004e58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	029b      	lsls	r3, r3, #10
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	e047      	b.n	8004efe <USB_EPStartXfer+0x1256>
 8004e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d104      	bne.n	8004e8e <USB_EPStartXfer+0x11e6>
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	029b      	lsls	r3, r3, #10
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ea6:	801a      	strh	r2, [r3, #0]
 8004ea8:	e029      	b.n	8004efe <USB_EPStartXfer+0x1256>
 8004eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d121      	bne.n	8004efe <USB_EPStartXfer+0x1256>
 8004eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	011a      	lsls	r2, r3, #4
 8004ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ee8:	4413      	add	r3, r2
 8004eea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004efc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	895b      	ldrh	r3, [r3, #10]
 8004f0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6959      	ldr	r1, [r3, #20]
 8004f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004f28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004f2c:	6800      	ldr	r0, [r0, #0]
 8004f2e:	f000 fe31 	bl	8005b94 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f54:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f60:	8013      	strh	r3, [r2, #0]
 8004f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f66:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004f6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f6e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004f72:	8812      	ldrh	r2, [r2, #0]
 8004f74:	f082 0210 	eor.w	r2, r2, #16
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004f82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f86:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004f8a:	8812      	ldrh	r2, [r2, #0]
 8004f8c:	f082 0220 	eor.w	r2, r2, #32
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8013      	strh	r3, [r2, #0]
 8004fca:	f000 bc9f 	b.w	800590c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	7b1b      	ldrb	r3, [r3, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 80ae 	bne.w	800513c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d917      	bls.n	800502c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501c:	1ad2      	subs	r2, r2, r3
 800501e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	619a      	str	r2, [r3, #24]
 800502a:	e00e      	b.n	800504a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800503c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800504a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800506e:	4413      	add	r3, r2
 8005070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005086:	4413      	add	r3, r2
 8005088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800508c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d116      	bne.n	80050c6 <USB_EPStartXfer+0x141e>
 8005098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050bc:	b29a      	uxth	r2, r3
 80050be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	e3e8      	b.n	8005898 <USB_EPStartXfer+0x1bf0>
 80050c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ca:	2b3e      	cmp	r3, #62	; 0x3e
 80050cc:	d818      	bhi.n	8005100 <USB_EPStartXfer+0x1458>
 80050ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80050d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <USB_EPStartXfer+0x1446>
 80050e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050e8:	3301      	adds	r3, #1
 80050ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80050ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	029b      	lsls	r3, r3, #10
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050fc:	801a      	strh	r2, [r3, #0]
 80050fe:	e3cb      	b.n	8005898 <USB_EPStartXfer+0x1bf0>
 8005100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800510a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <USB_EPStartXfer+0x1478>
 8005116:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800511a:	3b01      	subs	r3, #1
 800511c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005124:	b29b      	uxth	r3, r3
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	b29b      	uxth	r3, r3
 800512a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005132:	b29a      	uxth	r2, r3
 8005134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	e3ad      	b.n	8005898 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	78db      	ldrb	r3, [r3, #3]
 8005148:	2b02      	cmp	r3, #2
 800514a:	f040 8200 	bne.w	800554e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800514e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f040 8091 	bne.w	8005282 <USB_EPStartXfer+0x15da>
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517c:	b29b      	uxth	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005184:	4413      	add	r3, r2
 8005186:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800518a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	011a      	lsls	r2, r3, #4
 8005198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800519c:	4413      	add	r3, r2
 800519e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d116      	bne.n	80051e4 <USB_EPStartXfer+0x153c>
 80051b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29a      	uxth	r2, r3
 80051dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e083      	b.n	80052ec <USB_EPStartXfer+0x1644>
 80051e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b3e      	cmp	r3, #62	; 0x3e
 80051f2:	d820      	bhi.n	8005236 <USB_EPStartXfer+0x158e>
 80051f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <USB_EPStartXfer+0x157c>
 800521a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521e:	3301      	adds	r3, #1
 8005220:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005228:	b29b      	uxth	r3, r3
 800522a:	029b      	lsls	r3, r3, #10
 800522c:	b29a      	uxth	r2, r3
 800522e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	e05a      	b.n	80052ec <USB_EPStartXfer+0x1644>
 8005236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <USB_EPStartXfer+0x15be>
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005260:	3b01      	subs	r3, #1
 8005262:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800526a:	b29b      	uxth	r3, r3
 800526c:	029b      	lsls	r3, r3, #10
 800526e:	b29b      	uxth	r3, r3
 8005270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005278:	b29a      	uxth	r2, r3
 800527a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e034      	b.n	80052ec <USB_EPStartXfer+0x1644>
 8005282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d12c      	bne.n	80052ec <USB_EPStartXfer+0x1644>
 8005292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80052a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b6:	4413      	add	r3, r2
 80052b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80052bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	011a      	lsls	r2, r3, #4
 80052ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ce:	4413      	add	r3, r2
 80052d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052ea:	801a      	strh	r2, [r3, #0]
 80052ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f040 8091 	bne.w	800542e <USB_EPStartXfer+0x1786>
 800530c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800531a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005328:	b29b      	uxth	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005330:	4413      	add	r3, r2
 8005332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	011a      	lsls	r2, r3, #4
 8005344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005348:	4413      	add	r3, r2
 800534a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800534e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d116      	bne.n	8005390 <USB_EPStartXfer+0x16e8>
 8005362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800536e:	b29a      	uxth	r2, r3
 8005370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005386:	b29a      	uxth	r2, r3
 8005388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	e07c      	b.n	800548a <USB_EPStartXfer+0x17e2>
 8005390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b3e      	cmp	r3, #62	; 0x3e
 800539e:	d820      	bhi.n	80053e2 <USB_EPStartXfer+0x173a>
 80053a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <USB_EPStartXfer+0x1728>
 80053c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053ca:	3301      	adds	r3, #1
 80053cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	029b      	lsls	r3, r3, #10
 80053d8:	b29a      	uxth	r2, r3
 80053da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	e053      	b.n	800548a <USB_EPStartXfer+0x17e2>
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <USB_EPStartXfer+0x176a>
 8005408:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800540c:	3b01      	subs	r3, #1
 800540e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005412:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005416:	b29b      	uxth	r3, r3
 8005418:	029b      	lsls	r3, r3, #10
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005424:	b29a      	uxth	r2, r3
 8005426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e02d      	b.n	800548a <USB_EPStartXfer+0x17e2>
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d125      	bne.n	800548a <USB_EPStartXfer+0x17e2>
 800543e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544c:	b29b      	uxth	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005454:	4413      	add	r3, r2
 8005456:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	011a      	lsls	r2, r3, #4
 8005468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800546c:	4413      	add	r3, r2
 800546e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	b29a      	uxth	r2, r3
 8005484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005488:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800548a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 81fe 	beq.w	8005898 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800549c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80054bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80054c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <USB_EPStartXfer+0x182c>
 80054c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10d      	bne.n	80054f0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80054d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80054d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f040 81db 	bne.w	8005898 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80054e2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 81d4 	bne.w	8005898 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80054f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800551a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005548:	b29b      	uxth	r3, r3
 800554a:	8013      	strh	r3, [r2, #0]
 800554c:	e1a4      	b.n	8005898 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	78db      	ldrb	r3, [r3, #3]
 800555a:	2b01      	cmp	r3, #1
 800555c:	f040 819a 	bne.w	8005894 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d917      	bls.n	80055ac <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800558c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559c:	1ad2      	subs	r2, r2, r3
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	619a      	str	r2, [r3, #24]
 80055aa:	e00e      	b.n	80055ca <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80055ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80055bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80055ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d178      	bne.n	80056cc <USB_EPStartXfer+0x1a24>
 80055da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055fe:	4413      	add	r3, r2
 8005600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	011a      	lsls	r2, r3, #4
 8005612:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005616:	4413      	add	r3, r2
 8005618:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800561c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d116      	bne.n	8005656 <USB_EPStartXfer+0x19ae>
 8005628:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005634:	b29a      	uxth	r2, r3
 8005636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564c:	b29a      	uxth	r2, r3
 800564e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	e06b      	b.n	800572e <USB_EPStartXfer+0x1a86>
 8005656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800565a:	2b3e      	cmp	r3, #62	; 0x3e
 800565c:	d818      	bhi.n	8005690 <USB_EPStartXfer+0x19e8>
 800565e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <USB_EPStartXfer+0x19d6>
 8005674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005678:	3301      	adds	r3, #1
 800567a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800567e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005682:	b29b      	uxth	r3, r3
 8005684:	029b      	lsls	r3, r3, #10
 8005686:	b29a      	uxth	r2, r3
 8005688:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e04e      	b.n	800572e <USB_EPStartXfer+0x1a86>
 8005690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800569a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <USB_EPStartXfer+0x1a08>
 80056a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056aa:	3b01      	subs	r3, #1
 80056ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	029b      	lsls	r3, r3, #10
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056c8:	801a      	strh	r2, [r3, #0]
 80056ca:	e030      	b.n	800572e <USB_EPStartXfer+0x1a86>
 80056cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d128      	bne.n	800572e <USB_EPStartXfer+0x1a86>
 80056dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	4413      	add	r3, r2
 8005702:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	011a      	lsls	r2, r3, #4
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	4413      	add	r3, r2
 800571a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800571e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005726:	b29a      	uxth	r2, r3
 8005728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800573c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d178      	bne.n	800583e <USB_EPStartXfer+0x1b96>
 800574c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005768:	b29b      	uxth	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005770:	4413      	add	r3, r2
 8005772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	011a      	lsls	r2, r3, #4
 8005784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005788:	4413      	add	r3, r2
 800578a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800578e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d116      	bne.n	80057c8 <USB_EPStartXfer+0x1b20>
 800579a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e067      	b.n	8005898 <USB_EPStartXfer+0x1bf0>
 80057c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057cc:	2b3e      	cmp	r3, #62	; 0x3e
 80057ce:	d818      	bhi.n	8005802 <USB_EPStartXfer+0x1b5a>
 80057d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <USB_EPStartXfer+0x1b48>
 80057e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057ea:	3301      	adds	r3, #1
 80057ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	e04a      	b.n	8005898 <USB_EPStartXfer+0x1bf0>
 8005802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <USB_EPStartXfer+0x1b7a>
 8005818:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800581c:	3b01      	subs	r3, #1
 800581e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005826:	b29b      	uxth	r3, r3
 8005828:	029b      	lsls	r3, r3, #10
 800582a:	b29b      	uxth	r3, r3
 800582c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005834:	b29a      	uxth	r2, r3
 8005836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	e02c      	b.n	8005898 <USB_EPStartXfer+0x1bf0>
 800583e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d124      	bne.n	8005898 <USB_EPStartXfer+0x1bf0>
 800584e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005864:	4413      	add	r3, r2
 8005866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	011a      	lsls	r2, r3, #4
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	4413      	add	r3, r2
 800587e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588a:	b29a      	uxth	r2, r3
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e001      	b.n	8005898 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e03a      	b.n	800590e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80058c2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80058c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80058ce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80058d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	441a      	add	r2, r3
 80058f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80058f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005908:	b29b      	uxth	r3, r3
 800590a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d020      	beq.n	800596c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005940:	81bb      	strh	r3, [r7, #12]
 8005942:	89bb      	ldrh	r3, [r7, #12]
 8005944:	f083 0310 	eor.w	r3, r3, #16
 8005948:	81bb      	strh	r3, [r7, #12]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	441a      	add	r2, r3
 8005954:	89bb      	ldrh	r3, [r7, #12]
 8005956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]
 800596a:	e01f      	b.n	80059ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	81fb      	strh	r3, [r7, #14]
 8005984:	89fb      	ldrh	r3, [r7, #14]
 8005986:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800598a:	81fb      	strh	r3, [r7, #14]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	89fb      	ldrh	r3, [r7, #14]
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	7b1b      	ldrb	r3, [r3, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 809d 	bne.w	8005b06 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d04c      	beq.n	8005a6e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	823b      	strh	r3, [r7, #16]
 80059e2:	8a3b      	ldrh	r3, [r7, #16]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <USB_EPClearStall+0x6c>
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	81fb      	strh	r3, [r7, #14]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	89fb      	ldrh	r3, [r7, #14]
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	78db      	ldrb	r3, [r3, #3]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d06c      	beq.n	8005b06 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	81bb      	strh	r3, [r7, #12]
 8005a44:	89bb      	ldrh	r3, [r7, #12]
 8005a46:	f083 0320 	eor.w	r3, r3, #32
 8005a4a:	81bb      	strh	r3, [r7, #12]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	89bb      	ldrh	r3, [r7, #12]
 8005a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	8013      	strh	r3, [r2, #0]
 8005a6c:	e04b      	b.n	8005b06 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	82fb      	strh	r3, [r7, #22]
 8005a7c:	8afb      	ldrh	r3, [r7, #22]
 8005a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01b      	beq.n	8005abe <USB_EPClearStall+0x106>
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	82bb      	strh	r3, [r7, #20]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	8abb      	ldrh	r3, [r7, #20]
 8005aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	827b      	strh	r3, [r7, #18]
 8005ad6:	8a7b      	ldrh	r3, [r7, #18]
 8005ad8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005adc:	827b      	strh	r3, [r7, #18]
 8005ade:	8a7b      	ldrh	r3, [r7, #18]
 8005ae0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ae4:	827b      	strh	r3, [r7, #18]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	8a7b      	ldrh	r3, [r7, #18]
 8005af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b08d      	sub	sp, #52	; 0x34
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	80fb      	strh	r3, [r7, #6]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005baa:	88bb      	ldrh	r3, [r7, #4]
 8005bac:	3301      	adds	r3, #1
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	005a      	lsls	r2, r3, #1
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bcc:	e01e      	b.n	8005c0c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	3302      	adds	r3, #2
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	3301      	adds	r3, #1
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1dd      	bne.n	8005bce <USB_WritePMA+0x3a>
  }
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	3734      	adds	r7, #52	; 0x34
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b08b      	sub	sp, #44	; 0x2c
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	80fb      	strh	r3, [r7, #6]
 8005c30:	4613      	mov	r3, r2
 8005c32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005c34:	88bb      	ldrh	r3, [r7, #4]
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	005a      	lsls	r2, r3, #1
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c50:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
 8005c56:	e01b      	b.n	8005c90 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	3302      	adds	r3, #2
 8005c64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	3301      	adds	r3, #1
 8005c72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	3302      	adds	r3, #2
 8005c88:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e0      	bne.n	8005c58 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005c96:	88bb      	ldrh	r3, [r7, #4]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	701a      	strb	r2, [r3, #0]
  }
}
 8005cb2:	bf00      	nop
 8005cb4:	372c      	adds	r7, #44	; 0x2c
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005ccc:	2310      	movs	r3, #16
 8005cce:	2203      	movs	r2, #3
 8005cd0:	2181      	movs	r1, #129	; 0x81
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fd65 	bl	80077a2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005cde:	2310      	movs	r3, #16
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fd5c 	bl	80077a2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005cf2:	2024      	movs	r0, #36	; 0x24
 8005cf4:	f001 fe6a 	bl	80079cc <USBD_static_malloc>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]
 8005d0e:	e012      	b.n	8005d36 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d16:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	2101      	movs	r1, #1
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 fe27 	bl	8007984 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005d4c:	2181      	movs	r1, #129	; 0x81
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fd4d 	bl	80077ee <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fd46 	bl	80077ee <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00e      	beq.n	8005d92 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 fe2d 	bl	80079e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dac:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d051      	beq.n	8005e6e <USBD_CUSTOM_HID_Setup+0xd2>
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	f040 80d8 	bne.w	8005f80 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	3b02      	subs	r3, #2
 8005dd6:	2b09      	cmp	r3, #9
 8005dd8:	d841      	bhi.n	8005e5e <USBD_CUSTOM_HID_Setup+0xc2>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <USBD_CUSTOM_HID_Setup+0x44>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005e39 	.word	0x08005e39
 8005de4:	08005e17 	.word	0x08005e17
 8005de8:	08005e5f 	.word	0x08005e5f
 8005dec:	08005e5f 	.word	0x08005e5f
 8005df0:	08005e5f 	.word	0x08005e5f
 8005df4:	08005e5f 	.word	0x08005e5f
 8005df8:	08005e5f 	.word	0x08005e5f
 8005dfc:	08005e49 	.word	0x08005e49
 8005e00:	08005e27 	.word	0x08005e27
 8005e04:	08005e09 	.word	0x08005e09
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	885b      	ldrh	r3, [r3, #2]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	611a      	str	r2, [r3, #16]
          break;
 8005e14:	e02a      	b.n	8005e6c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	3310      	adds	r3, #16
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 f99f 	bl	8007162 <USBD_CtlSendData>
          break;
 8005e24:	e022      	b.n	8005e6c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	885b      	ldrh	r3, [r3, #2]
 8005e2a:	0a1b      	lsrs	r3, r3, #8
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	615a      	str	r2, [r3, #20]
          break;
 8005e36:	e019      	b.n	8005e6c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3314      	adds	r3, #20
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 f98e 	bl	8007162 <USBD_CtlSendData>
          break;
 8005e46:	e011      	b.n	8005e6c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	61da      	str	r2, [r3, #28]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005e4e:	6939      	ldr	r1, [r7, #16]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	88db      	ldrh	r3, [r3, #6]
 8005e54:	461a      	mov	r2, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 f9b1 	bl	80071be <USBD_CtlPrepareRx>
          break;
 8005e5c:	e006      	b.n	8005e6c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 f914 	bl	800708e <USBD_CtlError>
          ret = USBD_FAIL;
 8005e66:	2302      	movs	r3, #2
 8005e68:	75fb      	strb	r3, [r7, #23]
          break;
 8005e6a:	bf00      	nop
      }
      break;
 8005e6c:	e08f      	b.n	8005f8e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b0b      	cmp	r3, #11
 8005e74:	d87c      	bhi.n	8005f70 <USBD_CUSTOM_HID_Setup+0x1d4>
 8005e76:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <USBD_CUSTOM_HID_Setup+0xe0>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005ead 	.word	0x08005ead
 8005e80:	08005f71 	.word	0x08005f71
 8005e84:	08005f71 	.word	0x08005f71
 8005e88:	08005f71 	.word	0x08005f71
 8005e8c:	08005f71 	.word	0x08005f71
 8005e90:	08005f71 	.word	0x08005f71
 8005e94:	08005ed5 	.word	0x08005ed5
 8005e98:	08005f71 	.word	0x08005f71
 8005e9c:	08005f71 	.word	0x08005f71
 8005ea0:	08005f71 	.word	0x08005f71
 8005ea4:	08005f23 	.word	0x08005f23
 8005ea8:	08005f4b 	.word	0x08005f4b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d107      	bne.n	8005ec6 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005eb6:	f107 030e 	add.w	r3, r7, #14
 8005eba:	2202      	movs	r2, #2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 f94f 	bl	8007162 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ec4:	e05b      	b.n	8005f7e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 f8e0 	bl	800708e <USBD_CtlError>
            ret = USBD_FAIL;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed2:	e054      	b.n	8005f7e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	885b      	ldrh	r3, [r3, #2]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b22      	cmp	r3, #34	; 0x22
 8005ede:	d10b      	bne.n	8005ef8 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	88db      	ldrh	r3, [r3, #6]
 8005ee4:	2b27      	cmp	r3, #39	; 0x27
 8005ee6:	bf28      	it	cs
 8005ee8:	2327      	movcs	r3, #39	; 0x27
 8005eea:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	e00d      	b.n	8005f14 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	885b      	ldrh	r3, [r3, #2]
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b21      	cmp	r3, #33	; 0x21
 8005f02:	d107      	bne.n	8005f14 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005f04:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8005f06:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	88db      	ldrh	r3, [r3, #6]
 8005f0c:	2b09      	cmp	r3, #9
 8005f0e:	bf28      	it	cs
 8005f10:	2309      	movcs	r3, #9
 8005f12:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8005f14:	8bfb      	ldrh	r3, [r7, #30]
 8005f16:	461a      	mov	r2, r3
 8005f18:	69b9      	ldr	r1, [r7, #24]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 f921 	bl	8007162 <USBD_CtlSendData>
          break;
 8005f20:	e02d      	b.n	8005f7e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d107      	bne.n	8005f3c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	3318      	adds	r3, #24
 8005f30:	2201      	movs	r2, #1
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 f914 	bl	8007162 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f3a:	e020      	b.n	8005f7e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 f8a5 	bl	800708e <USBD_CtlError>
            ret = USBD_FAIL;
 8005f44:	2302      	movs	r3, #2
 8005f46:	75fb      	strb	r3, [r7, #23]
          break;
 8005f48:	e019      	b.n	8005f7e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d106      	bne.n	8005f62 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	885b      	ldrh	r3, [r3, #2]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f60:	e00d      	b.n	8005f7e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f001 f892 	bl	800708e <USBD_CtlError>
            ret = USBD_FAIL;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f6e:	e006      	b.n	8005f7e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f88b 	bl	800708e <USBD_CtlError>
          ret = USBD_FAIL;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f7c:	bf00      	nop
      }
      break;
 8005f7e:	e006      	b.n	8005f8e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 f883 	bl	800708e <USBD_CtlError>
      ret = USBD_FAIL;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8c:	bf00      	nop
  }
  return ret;
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3720      	adds	r7, #32
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000228 	.word	0x20000228

08005f9c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d111      	bne.n	8005fe0 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	2181      	movs	r1, #129	; 0x81
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f001 fcb2 	bl	800793e <USBD_LL_Transmit>
 8005fda:	e001      	b.n	8005fe0 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2229      	movs	r2, #41	; 0x29
 8005ff8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8005ffa:	4b03      	ldr	r3, [pc, #12]	; (8006008 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	200001a4 	.word	0x200001a4

0800600c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2229      	movs	r2, #41	; 0x29
 8006018:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800601a:	4b03      	ldr	r3, [pc, #12]	; (8006028 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	200001d0 	.word	0x200001d0

0800602c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2229      	movs	r2, #41	; 0x29
 8006038:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800603a:	4b03      	ldr	r3, [pc, #12]	; (8006048 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	200001fc 	.word	0x200001fc

0800604c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr

08006070 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006082:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	7810      	ldrb	r0, [r2, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	7852      	ldrb	r2, [r2, #1]
 8006094:	4611      	mov	r1, r2
 8006096:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	2310      	movs	r3, #16
 800609c:	2101      	movs	r1, #1
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fc70 	bl	8007984 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060bc:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10c      	bne.n	80060e0 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	7810      	ldrb	r0, [r2, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	7852      	ldrb	r2, [r2, #1]
 80060d6:	4611      	mov	r1, r2
 80060d8:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	220a      	movs	r2, #10
 80060f8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80060fa:	4b03      	ldr	r3, [pc, #12]	; (8006108 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000234 	.word	0x20000234

0800610c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006116:	2302      	movs	r3, #2
 8006118:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr

08006138 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800614c:	2302      	movs	r3, #2
 800614e:	e01a      	b.n	8006186 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	79fa      	ldrb	r2, [r7, #7]
 800617c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f001 faa4 	bl	80076cc <USBD_LL_Init>

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d006      	beq.n	80061b0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	e001      	b.n	80061b4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80061b0:	2302      	movs	r3, #2
 80061b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 facf 	bl	800776c <USBD_LL_Start>

  return USBD_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061f8:	2302      	movs	r3, #2
 80061fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00c      	beq.n	8006220 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	78fa      	ldrb	r2, [r7, #3]
 8006210:	4611      	mov	r1, r2
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	4611      	mov	r1, r2
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3

  return USBD_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fed7 	bl	8007016 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	2b02      	cmp	r3, #2
 800628a:	d016      	beq.n	80062ba <USBD_LL_SetupStage+0x6a>
 800628c:	2b02      	cmp	r3, #2
 800628e:	d81c      	bhi.n	80062ca <USBD_LL_SetupStage+0x7a>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <USBD_LL_SetupStage+0x4a>
 8006294:	2b01      	cmp	r3, #1
 8006296:	d008      	beq.n	80062aa <USBD_LL_SetupStage+0x5a>
 8006298:	e017      	b.n	80062ca <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f9ca 	bl	800663c <USBD_StdDevReq>
      break;
 80062a8:	e01a      	b.n	80062e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa2c 	bl	8006710 <USBD_StdItfReq>
      break;
 80062b8:	e012      	b.n	80062e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa6c 	bl	80067a0 <USBD_StdEPReq>
      break;
 80062c8:	e00a      	b.n	80062e0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 faa7 	bl	800782c <USBD_LL_StallEP>
      break;
 80062de:	bf00      	nop
  }

  return USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	460b      	mov	r3, r1
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80062f8:	7afb      	ldrb	r3, [r7, #11]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d14b      	bne.n	8006396 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006304:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800630c:	2b03      	cmp	r3, #3
 800630e:	d134      	bne.n	800637a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	429a      	cmp	r2, r3
 800631a:	d919      	bls.n	8006350 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	1ad2      	subs	r2, r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006332:	429a      	cmp	r2, r3
 8006334:	d203      	bcs.n	800633e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800633a:	b29b      	uxth	r3, r3
 800633c:	e002      	b.n	8006344 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 ff56 	bl	80071fa <USBD_CtlContinueRx>
 800634e:	e038      	b.n	80063c2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006362:	2b03      	cmp	r3, #3
 8006364:	d105      	bne.n	8006372 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 ff53 	bl	800721e <USBD_CtlSendStatus>
 8006378:	e023      	b.n	80063c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006380:	2b05      	cmp	r3, #5
 8006382:	d11e      	bne.n	80063c2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800638c:	2100      	movs	r1, #0
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 fa4c 	bl	800782c <USBD_LL_StallEP>
 8006394:	e015      	b.n	80063c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00d      	beq.n	80063be <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d108      	bne.n	80063be <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	7afa      	ldrb	r2, [r7, #11]
 80063b6:	4611      	mov	r1, r2
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	4798      	blx	r3
 80063bc:	e001      	b.n	80063c2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063be:	2302      	movs	r3, #2
 80063c0:	e000      	b.n	80063c4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	460b      	mov	r3, r1
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063da:	7afb      	ldrb	r3, [r7, #11]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d17f      	bne.n	80064e0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3314      	adds	r3, #20
 80063e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d15c      	bne.n	80064aa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d915      	bls.n	8006428 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	1ad2      	subs	r2, r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	b29b      	uxth	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fec0 	bl	800719a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800641a:	2300      	movs	r3, #0
 800641c:	2200      	movs	r2, #0
 800641e:	2100      	movs	r1, #0
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f001 faaf 	bl	8007984 <USBD_LL_PrepareReceive>
 8006426:	e04e      	b.n	80064c6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	6912      	ldr	r2, [r2, #16]
 8006430:	fbb3 f1f2 	udiv	r1, r3, r2
 8006434:	fb01 f202 	mul.w	r2, r1, r2
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d11c      	bne.n	8006478 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006446:	429a      	cmp	r2, r3
 8006448:	d316      	bcc.n	8006478 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006454:	429a      	cmp	r2, r3
 8006456:	d20f      	bcs.n	8006478 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006458:	2200      	movs	r2, #0
 800645a:	2100      	movs	r1, #0
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fe9c 	bl	800719a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800646a:	2300      	movs	r3, #0
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f001 fa87 	bl	8007984 <USBD_LL_PrepareReceive>
 8006476:	e026      	b.n	80064c6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800648a:	2b03      	cmp	r3, #3
 800648c:	d105      	bne.n	800649a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800649a:	2180      	movs	r1, #128	; 0x80
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f001 f9c5 	bl	800782c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fece 	bl	8007244 <USBD_CtlReceiveStatus>
 80064a8:	e00d      	b.n	80064c6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d004      	beq.n	80064be <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f001 f9b3 	bl	800782c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d11d      	bne.n	800650c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f7ff fe81 	bl	80061d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80064de:	e015      	b.n	800650c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00d      	beq.n	8006508 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d108      	bne.n	8006508 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	7afa      	ldrb	r2, [r7, #11]
 8006500:	4611      	mov	r1, r2
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	4798      	blx	r3
 8006506:	e001      	b.n	800650c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	e000      	b.n	800650e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 f93c 	bl	80077a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2240      	movs	r2, #64	; 0x40
 8006536:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800653a:	2340      	movs	r3, #64	; 0x40
 800653c:	2200      	movs	r2, #0
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f92e 	bl	80077a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2240      	movs	r2, #64	; 0x40
 8006550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6852      	ldr	r2, [r2, #4]
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	4611      	mov	r1, r2
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
  }

  return USBD_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr

080065b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2204      	movs	r2, #4
 80065ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr

080065de <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d105      	bne.n	80065fc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	2b03      	cmp	r3, #3
 8006618:	d10b      	bne.n	8006632 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d005      	beq.n	8006662 <USBD_StdDevReq+0x26>
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d84f      	bhi.n	80066fa <USBD_StdDevReq+0xbe>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <USBD_StdDevReq+0x36>
 800665e:	2b20      	cmp	r3, #32
 8006660:	d14b      	bne.n	80066fa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
      break;
 8006670:	e048      	b.n	8006704 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b09      	cmp	r3, #9
 8006678:	d839      	bhi.n	80066ee <USBD_StdDevReq+0xb2>
 800667a:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <USBD_StdDevReq+0x44>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	080066d1 	.word	0x080066d1
 8006684:	080066e5 	.word	0x080066e5
 8006688:	080066ef 	.word	0x080066ef
 800668c:	080066db 	.word	0x080066db
 8006690:	080066ef 	.word	0x080066ef
 8006694:	080066b3 	.word	0x080066b3
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066ef 	.word	0x080066ef
 80066a0:	080066c7 	.word	0x080066c7
 80066a4:	080066bd 	.word	0x080066bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f9dc 	bl	8006a68 <USBD_GetDescriptor>
          break;
 80066b0:	e022      	b.n	80066f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fb3f 	bl	8006d38 <USBD_SetAddress>
          break;
 80066ba:	e01d      	b.n	80066f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fb7e 	bl	8006dc0 <USBD_SetConfig>
          break;
 80066c4:	e018      	b.n	80066f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fc07 	bl	8006edc <USBD_GetConfig>
          break;
 80066ce:	e013      	b.n	80066f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fc37 	bl	8006f46 <USBD_GetStatus>
          break;
 80066d8:	e00e      	b.n	80066f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fc65 	bl	8006fac <USBD_SetFeature>
          break;
 80066e2:	e009      	b.n	80066f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fc74 	bl	8006fd4 <USBD_ClrFeature>
          break;
 80066ec:	e004      	b.n	80066f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fccc 	bl	800708e <USBD_CtlError>
          break;
 80066f6:	bf00      	nop
      }
      break;
 80066f8:	e004      	b.n	8006704 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fcc6 	bl	800708e <USBD_CtlError>
      break;
 8006702:	bf00      	nop
  }

  return ret;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop

08006710 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d005      	beq.n	8006736 <USBD_StdItfReq+0x26>
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d82e      	bhi.n	800678c <USBD_StdItfReq+0x7c>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <USBD_StdItfReq+0x26>
 8006732:	2b20      	cmp	r3, #32
 8006734:	d12a      	bne.n	800678c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673c:	3b01      	subs	r3, #1
 800673e:	2b02      	cmp	r3, #2
 8006740:	d81d      	bhi.n	800677e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	889b      	ldrh	r3, [r3, #4]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	d813      	bhi.n	8006774 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
 800675a:	4603      	mov	r3, r0
 800675c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	88db      	ldrh	r3, [r3, #6]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d110      	bne.n	8006788 <USBD_StdItfReq+0x78>
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10d      	bne.n	8006788 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fd56 	bl	800721e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006772:	e009      	b.n	8006788 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fc89 	bl	800708e <USBD_CtlError>
          break;
 800677c:	e004      	b.n	8006788 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fc84 	bl	800708e <USBD_CtlError>
          break;
 8006786:	e000      	b.n	800678a <USBD_StdItfReq+0x7a>
          break;
 8006788:	bf00      	nop
      }
      break;
 800678a:	e004      	b.n	8006796 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fc7d 	bl	800708e <USBD_CtlError>
      break;
 8006794:	bf00      	nop
  }

  return USBD_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	889b      	ldrh	r3, [r3, #4]
 80067b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d007      	beq.n	80067d0 <USBD_StdEPReq+0x30>
 80067c0:	2b40      	cmp	r3, #64	; 0x40
 80067c2:	f200 8146 	bhi.w	8006a52 <USBD_StdEPReq+0x2b2>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <USBD_StdEPReq+0x40>
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	f040 8141 	bne.w	8006a52 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
      break;
 80067de:	e13d      	b.n	8006a5c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d10a      	bne.n	8006802 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	e12d      	b.n	8006a5e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b03      	cmp	r3, #3
 8006808:	d007      	beq.n	800681a <USBD_StdEPReq+0x7a>
 800680a:	2b03      	cmp	r3, #3
 800680c:	f300 811b 	bgt.w	8006a46 <USBD_StdEPReq+0x2a6>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d072      	beq.n	80068fa <USBD_StdEPReq+0x15a>
 8006814:	2b01      	cmp	r3, #1
 8006816:	d03a      	beq.n	800688e <USBD_StdEPReq+0xee>
 8006818:	e115      	b.n	8006a46 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	2b02      	cmp	r3, #2
 8006822:	d002      	beq.n	800682a <USBD_StdEPReq+0x8a>
 8006824:	2b03      	cmp	r3, #3
 8006826:	d015      	beq.n	8006854 <USBD_StdEPReq+0xb4>
 8006828:	e02b      	b.n	8006882 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00c      	beq.n	800684a <USBD_StdEPReq+0xaa>
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d009      	beq.n	800684a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fff6 	bl	800782c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006840:	2180      	movs	r1, #128	; 0x80
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fff2 	bl	800782c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006848:	e020      	b.n	800688c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fc1e 	bl	800708e <USBD_CtlError>
              break;
 8006852:	e01b      	b.n	800688c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	885b      	ldrh	r3, [r3, #2]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10e      	bne.n	800687a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <USBD_StdEPReq+0xda>
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d008      	beq.n	800687a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	88db      	ldrh	r3, [r3, #6]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 ffd9 	bl	800782c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fccf 	bl	800721e <USBD_CtlSendStatus>

              break;
 8006880:	e004      	b.n	800688c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fc02 	bl	800708e <USBD_CtlError>
              break;
 800688a:	bf00      	nop
          }
          break;
 800688c:	e0e0      	b.n	8006a50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006894:	2b02      	cmp	r3, #2
 8006896:	d002      	beq.n	800689e <USBD_StdEPReq+0xfe>
 8006898:	2b03      	cmp	r3, #3
 800689a:	d015      	beq.n	80068c8 <USBD_StdEPReq+0x128>
 800689c:	e026      	b.n	80068ec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00c      	beq.n	80068be <USBD_StdEPReq+0x11e>
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	2b80      	cmp	r3, #128	; 0x80
 80068a8:	d009      	beq.n	80068be <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 ffbc 	bl	800782c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068b4:	2180      	movs	r1, #128	; 0x80
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 ffb8 	bl	800782c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068bc:	e01c      	b.n	80068f8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fbe4 	bl	800708e <USBD_CtlError>
              break;
 80068c6:	e017      	b.n	80068f8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	885b      	ldrh	r3, [r3, #2]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d112      	bne.n	80068f6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 ffc3 	bl	800786a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fc9a 	bl	800721e <USBD_CtlSendStatus>
              }
              break;
 80068ea:	e004      	b.n	80068f6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fbcd 	bl	800708e <USBD_CtlError>
              break;
 80068f4:	e000      	b.n	80068f8 <USBD_StdEPReq+0x158>
              break;
 80068f6:	bf00      	nop
          }
          break;
 80068f8:	e0aa      	b.n	8006a50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006900:	2b02      	cmp	r3, #2
 8006902:	d002      	beq.n	800690a <USBD_StdEPReq+0x16a>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d032      	beq.n	800696e <USBD_StdEPReq+0x1ce>
 8006908:	e097      	b.n	8006a3a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <USBD_StdEPReq+0x180>
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d004      	beq.n	8006920 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fbb8 	bl	800708e <USBD_CtlError>
                break;
 800691e:	e091      	b.n	8006a44 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006924:	2b00      	cmp	r3, #0
 8006926:	da0b      	bge.n	8006940 <USBD_StdEPReq+0x1a0>
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	3310      	adds	r3, #16
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	3304      	adds	r3, #4
 800693e:	e00b      	b.n	8006958 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4413      	add	r3, r2
 8006956:	3304      	adds	r3, #4
 8006958:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2202      	movs	r2, #2
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fbfb 	bl	8007162 <USBD_CtlSendData>
              break;
 800696c:	e06a      	b.n	8006a44 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800696e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da11      	bge.n	800699a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 020f 	and.w	r2, r3, #15
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	3318      	adds	r3, #24
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d117      	bne.n	80069c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fb7b 	bl	800708e <USBD_CtlError>
                  break;
 8006998:	e054      	b.n	8006a44 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fb68 	bl	800708e <USBD_CtlError>
                  break;
 80069be:	e041      	b.n	8006a44 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	da0b      	bge.n	80069e0 <USBD_StdEPReq+0x240>
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	3310      	adds	r3, #16
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	3304      	adds	r3, #4
 80069de:	e00b      	b.n	80069f8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	3304      	adds	r3, #4
 80069f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <USBD_StdEPReq+0x266>
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d103      	bne.n	8006a0e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e00e      	b.n	8006a2c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 ff48 	bl	80078a8 <USBD_LL_IsStallEP>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2201      	movs	r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e002      	b.n	8006a2c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb95 	bl	8007162 <USBD_CtlSendData>
              break;
 8006a38:	e004      	b.n	8006a44 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb26 	bl	800708e <USBD_CtlError>
              break;
 8006a42:	bf00      	nop
          }
          break;
 8006a44:	e004      	b.n	8006a50 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fb20 	bl	800708e <USBD_CtlError>
          break;
 8006a4e:	bf00      	nop
      }
      break;
 8006a50:	e004      	b.n	8006a5c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fb1a 	bl	800708e <USBD_CtlError>
      break;
 8006a5a:	bf00      	nop
  }

  return ret;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	885b      	ldrh	r3, [r3, #2]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b06      	cmp	r3, #6
 8006a8a:	f200 8128 	bhi.w	8006cde <USBD_GetDescriptor+0x276>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBD_GetDescriptor+0x2c>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006ab1 	.word	0x08006ab1
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006b09 	.word	0x08006b09
 8006aa0:	08006cdf 	.word	0x08006cdf
 8006aa4:	08006cdf 	.word	0x08006cdf
 8006aa8:	08006c7f 	.word	0x08006c7f
 8006aac:	08006cab 	.word	0x08006cab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	7c12      	ldrb	r2, [r2, #16]
 8006abc:	f107 0108 	add.w	r1, r7, #8
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
 8006ac4:	60f8      	str	r0, [r7, #12]
      break;
 8006ac6:	e112      	b.n	8006cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	7c1b      	ldrb	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10d      	bne.n	8006aec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	f107 0208 	add.w	r2, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006aea:	e100      	b.n	8006cee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	f107 0208 	add.w	r2, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3301      	adds	r3, #1
 8006b02:	2202      	movs	r2, #2
 8006b04:	701a      	strb	r2, [r3, #0]
      break;
 8006b06:	e0f2      	b.n	8006cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	885b      	ldrh	r3, [r3, #2]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	f200 80ac 	bhi.w	8006c6c <USBD_GetDescriptor+0x204>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <USBD_GetDescriptor+0xb4>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b35 	.word	0x08006b35
 8006b20:	08006b69 	.word	0x08006b69
 8006b24:	08006b9d 	.word	0x08006b9d
 8006b28:	08006bd1 	.word	0x08006bd1
 8006b2c:	08006c05 	.word	0x08006c05
 8006b30:	08006c39 	.word	0x08006c39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	7c12      	ldrb	r2, [r2, #16]
 8006b4c:	f107 0108 	add.w	r1, r7, #8
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
 8006b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b56:	e091      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa97 	bl	800708e <USBD_CtlError>
            err++;
 8006b60:	7afb      	ldrb	r3, [r7, #11]
 8006b62:	3301      	adds	r3, #1
 8006b64:	72fb      	strb	r3, [r7, #11]
          break;
 8006b66:	e089      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	7c12      	ldrb	r2, [r2, #16]
 8006b80:	f107 0108 	add.w	r1, r7, #8
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
 8006b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8a:	e077      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa7d 	bl	800708e <USBD_CtlError>
            err++;
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	3301      	adds	r3, #1
 8006b98:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9a:	e06f      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	7c12      	ldrb	r2, [r2, #16]
 8006bb4:	f107 0108 	add.w	r1, r7, #8
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
 8006bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bbe:	e05d      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa63 	bl	800708e <USBD_CtlError>
            err++;
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bce:	e055      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	7c12      	ldrb	r2, [r2, #16]
 8006be8:	f107 0108 	add.w	r1, r7, #8
 8006bec:	4610      	mov	r0, r2
 8006bee:	4798      	blx	r3
 8006bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf2:	e043      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa49 	bl	800708e <USBD_CtlError>
            err++;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	72fb      	strb	r3, [r7, #11]
          break;
 8006c02:	e03b      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7c12      	ldrb	r2, [r2, #16]
 8006c1c:	f107 0108 	add.w	r1, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c26:	e029      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa2f 	bl	800708e <USBD_CtlError>
            err++;
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	3301      	adds	r3, #1
 8006c34:	72fb      	strb	r3, [r7, #11]
          break;
 8006c36:	e021      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	7c12      	ldrb	r2, [r2, #16]
 8006c50:	f107 0108 	add.w	r1, r7, #8
 8006c54:	4610      	mov	r0, r2
 8006c56:	4798      	blx	r3
 8006c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5a:	e00f      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa15 	bl	800708e <USBD_CtlError>
            err++;
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	3301      	adds	r3, #1
 8006c68:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6a:	e007      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fa0d 	bl	800708e <USBD_CtlError>
          err++;
 8006c74:	7afb      	ldrb	r3, [r7, #11]
 8006c76:	3301      	adds	r3, #1
 8006c78:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006c7a:	e038      	b.n	8006cee <USBD_GetDescriptor+0x286>
 8006c7c:	e037      	b.n	8006cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	7c1b      	ldrb	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8e:	f107 0208 	add.w	r2, r7, #8
 8006c92:	4610      	mov	r0, r2
 8006c94:	4798      	blx	r3
 8006c96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c98:	e029      	b.n	8006cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9f6 	bl	800708e <USBD_CtlError>
        err++;
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ca8:	e021      	b.n	8006cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	7c1b      	ldrb	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10d      	bne.n	8006cce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	f107 0208 	add.w	r2, r7, #8
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4798      	blx	r3
 8006cc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	2207      	movs	r2, #7
 8006cca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ccc:	e00f      	b.n	8006cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f9dc 	bl	800708e <USBD_CtlError>
        err++;
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	72fb      	strb	r3, [r7, #11]
      break;
 8006cdc:	e007      	b.n	8006cee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f9d4 	bl	800708e <USBD_CtlError>
      err++;
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	72fb      	strb	r3, [r7, #11]
      break;
 8006cec:	bf00      	nop
  }

  if (err != 0U)
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d11c      	bne.n	8006d2e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006cf4:	893b      	ldrh	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d011      	beq.n	8006d1e <USBD_GetDescriptor+0x2b6>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	88db      	ldrh	r3, [r3, #6]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	88da      	ldrh	r2, [r3, #6]
 8006d06:	893b      	ldrh	r3, [r7, #8]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	bf28      	it	cs
 8006d0c:	4613      	movcs	r3, r2
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d12:	893b      	ldrh	r3, [r7, #8]
 8006d14:	461a      	mov	r2, r3
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fa22 	bl	8007162 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	88db      	ldrh	r3, [r3, #6]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa79 	bl	800721e <USBD_CtlSendStatus>
 8006d2c:	e000      	b.n	8006d30 <USBD_GetDescriptor+0x2c8>
    return;
 8006d2e:	bf00      	nop
    }
  }
}
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop

08006d38 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	889b      	ldrh	r3, [r3, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d130      	bne.n	8006dac <USBD_SetAddress+0x74>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	88db      	ldrh	r3, [r3, #6]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d12c      	bne.n	8006dac <USBD_SetAddress+0x74>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	885b      	ldrh	r3, [r3, #2]
 8006d56:	2b7f      	cmp	r3, #127	; 0x7f
 8006d58:	d828      	bhi.n	8006dac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	885b      	ldrh	r3, [r3, #2]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d104      	bne.n	8006d7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f98b 	bl	800708e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	e01d      	b.n	8006db6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7bfa      	ldrb	r2, [r7, #15]
 8006d7e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fdba 	bl	8007900 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fa46 	bl	800721e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da0:	e009      	b.n	8006db6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006daa:	e004      	b.n	8006db6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f96d 	bl	800708e <USBD_CtlError>
  }
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	4b41      	ldr	r3, [pc, #260]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006dd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006dd4:	4b40      	ldr	r3, [pc, #256]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d904      	bls.n	8006de6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f955 	bl	800708e <USBD_CtlError>
 8006de4:	e075      	b.n	8006ed2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d002      	beq.n	8006df6 <USBD_SetConfig+0x36>
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d023      	beq.n	8006e3c <USBD_SetConfig+0x7c>
 8006df4:	e062      	b.n	8006ebc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006df6:	4b38      	ldr	r3, [pc, #224]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01a      	beq.n	8006e34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006dfe:	4b36      	ldr	r3, [pc, #216]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e10:	4b31      	ldr	r3, [pc, #196]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff f9e8 	bl	80061ec <USBD_SetClassConfig>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d104      	bne.n	8006e2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f932 	bl	800708e <USBD_CtlError>
            return;
 8006e2a:	e052      	b.n	8006ed2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f9f6 	bl	800721e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006e32:	e04e      	b.n	8006ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f9f2 	bl	800721e <USBD_CtlSendStatus>
        break;
 8006e3a:	e04a      	b.n	8006ed2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006e3c:	4b26      	ldr	r3, [pc, #152]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d112      	bne.n	8006e6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006e4c:	4b22      	ldr	r3, [pc, #136]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006e56:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff f9e4 	bl	800622a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9db 	bl	800721e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006e68:	e033      	b.n	8006ed2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006e6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d01d      	beq.n	8006eb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff f9d2 	bl	800622a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e90:	4b11      	ldr	r3, [pc, #68]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff f9a8 	bl	80061ec <USBD_SetClassConfig>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d104      	bne.n	8006eac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f8f2 	bl	800708e <USBD_CtlError>
            return;
 8006eaa:	e012      	b.n	8006ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f9b6 	bl	800721e <USBD_CtlSendStatus>
        break;
 8006eb2:	e00e      	b.n	8006ed2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f9b2 	bl	800721e <USBD_CtlSendStatus>
        break;
 8006eba:	e00a      	b.n	8006ed2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f8e5 	bl	800708e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ec4:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <USBD_SetConfig+0x118>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff f9ad 	bl	800622a <USBD_ClrClassConfig>
        break;
 8006ed0:	bf00      	nop
    }
  }
}
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20000368 	.word	0x20000368

08006edc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	88db      	ldrh	r3, [r3, #6]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d004      	beq.n	8006ef8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f8cc 	bl	800708e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ef6:	e022      	b.n	8006f3e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	dc02      	bgt.n	8006f08 <USBD_GetConfig+0x2c>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	dc03      	bgt.n	8006f0e <USBD_GetConfig+0x32>
 8006f06:	e015      	b.n	8006f34 <USBD_GetConfig+0x58>
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d00b      	beq.n	8006f24 <USBD_GetConfig+0x48>
 8006f0c:	e012      	b.n	8006f34 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3308      	adds	r3, #8
 8006f18:	2201      	movs	r2, #1
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f920 	bl	8007162 <USBD_CtlSendData>
        break;
 8006f22:	e00c      	b.n	8006f3e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3304      	adds	r3, #4
 8006f28:	2201      	movs	r2, #1
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f918 	bl	8007162 <USBD_CtlSendData>
        break;
 8006f32:	e004      	b.n	8006f3e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8a9 	bl	800708e <USBD_CtlError>
        break;
 8006f3c:	bf00      	nop
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f56:	3b01      	subs	r3, #1
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d81e      	bhi.n	8006f9a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	88db      	ldrh	r3, [r3, #6]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d004      	beq.n	8006f6e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f891 	bl	800708e <USBD_CtlError>
        break;
 8006f6c:	e01a      	b.n	8006fa4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f043 0202 	orr.w	r2, r3, #2
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	2202      	movs	r2, #2
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f8e5 	bl	8007162 <USBD_CtlSendData>
      break;
 8006f98:	e004      	b.n	8006fa4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f876 	bl	800708e <USBD_CtlError>
      break;
 8006fa2:	bf00      	nop
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	885b      	ldrh	r3, [r3, #2]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d106      	bne.n	8006fcc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f929 	bl	800721e <USBD_CtlSendStatus>
  }
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d80b      	bhi.n	8007002 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d10c      	bne.n	800700c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f90f 	bl	800721e <USBD_CtlSendStatus>
      }
      break;
 8007000:	e004      	b.n	800700c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f842 	bl	800708e <USBD_CtlError>
      break;
 800700a:	e000      	b.n	800700e <USBD_ClrFeature+0x3a>
      break;
 800700c:	bf00      	nop
  }
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781a      	ldrb	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	785a      	ldrb	r2, [r3, #1]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	3302      	adds	r3, #2
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b29a      	uxth	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	3303      	adds	r3, #3
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	b29b      	uxth	r3, r3
 8007044:	4413      	add	r3, r2
 8007046:	b29a      	uxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	3304      	adds	r3, #4
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	b29a      	uxth	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	3305      	adds	r3, #5
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	b29b      	uxth	r3, r3
 8007060:	4413      	add	r3, r2
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	3306      	adds	r3, #6
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	b29a      	uxth	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	3307      	adds	r3, #7
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	b29b      	uxth	r3, r3
 800707c:	4413      	add	r3, r2
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	80da      	strh	r2, [r3, #6]

}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr

0800708e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fbc6 	bl	800782c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fbc2 	bl	800782c <USBD_LL_StallEP>
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d032      	beq.n	800712c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f834 	bl	8007134 <USBD_GetLen>
 80070cc:	4603      	mov	r3, r0
 80070ce:	3301      	adds	r3, #1
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	75fa      	strb	r2, [r7, #23]
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	75fa      	strb	r2, [r7, #23]
 80070f2:	461a      	mov	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4413      	add	r3, r2
 80070f8:	2203      	movs	r2, #3
 80070fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80070fc:	e012      	b.n	8007124 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	60fa      	str	r2, [r7, #12]
 8007104:	7dfa      	ldrb	r2, [r7, #23]
 8007106:	1c51      	adds	r1, r2, #1
 8007108:	75f9      	strb	r1, [r7, #23]
 800710a:	4611      	mov	r1, r2
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	440a      	add	r2, r1
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	75fa      	strb	r2, [r7, #23]
 800711a:	461a      	mov	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4413      	add	r3, r2
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e8      	bne.n	80070fe <USBD_GetString+0x4e>
    }
  }
}
 800712c:	bf00      	nop
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007140:	e005      	b.n	800714e <USBD_GetLen+0x1a>
  {
    len++;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	3301      	adds	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3301      	adds	r3, #1
 800714c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f5      	bne.n	8007142 <USBD_GetLen+0xe>
  }

  return len;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr

08007162 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	4613      	mov	r3, r2
 800716e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2202      	movs	r2, #2
 8007174:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007178:	88fa      	ldrh	r2, [r7, #6]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800717e:	88fa      	ldrh	r2, [r7, #6]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	2100      	movs	r1, #0
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fbd7 	bl	800793e <USBD_LL_Transmit>

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	4613      	mov	r3, r2
 80071a6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	2100      	movs	r1, #0
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 fbc5 	bl	800793e <USBD_LL_Transmit>

  return USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2203      	movs	r2, #3
 80071d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80071d4:	88fa      	ldrh	r2, [r7, #6]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80071dc:	88fa      	ldrh	r2, [r7, #6]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	2100      	movs	r1, #0
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 fbca 	bl	8007984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	4613      	mov	r3, r2
 8007206:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	2100      	movs	r1, #0
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fbb8 	bl	8007984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2204      	movs	r2, #4
 800722a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800722e:	2300      	movs	r3, #0
 8007230:	2200      	movs	r2, #0
 8007232:	2100      	movs	r1, #0
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fb82 	bl	800793e <USBD_LL_Transmit>

  return USBD_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2205      	movs	r2, #5
 8007250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007254:	2300      	movs	r3, #0
 8007256:	2200      	movs	r2, #0
 8007258:	2100      	movs	r1, #0
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fb92 	bl	8007984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007270:	2200      	movs	r2, #0
 8007272:	4912      	ldr	r1, [pc, #72]	; (80072bc <MX_USB_DEVICE_Init+0x50>)
 8007274:	4812      	ldr	r0, [pc, #72]	; (80072c0 <MX_USB_DEVICE_Init+0x54>)
 8007276:	f7fe ff5f 	bl	8006138 <USBD_Init>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007280:	f7f9 f9b6 	bl	80005f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007284:	490f      	ldr	r1, [pc, #60]	; (80072c4 <MX_USB_DEVICE_Init+0x58>)
 8007286:	480e      	ldr	r0, [pc, #56]	; (80072c0 <MX_USB_DEVICE_Init+0x54>)
 8007288:	f7fe ff81 	bl	800618e <USBD_RegisterClass>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007292:	f7f9 f9ad 	bl	80005f0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007296:	490c      	ldr	r1, [pc, #48]	; (80072c8 <MX_USB_DEVICE_Init+0x5c>)
 8007298:	4809      	ldr	r0, [pc, #36]	; (80072c0 <MX_USB_DEVICE_Init+0x54>)
 800729a:	f7fe ff37 	bl	800610c <USBD_CUSTOM_HID_RegisterInterface>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072a4:	f7f9 f9a4 	bl	80005f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072a8:	4805      	ldr	r0, [pc, #20]	; (80072c0 <MX_USB_DEVICE_Init+0x54>)
 80072aa:	f7fe ff89 	bl	80061c0 <USBD_Start>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80072b4:	f7f9 f99c 	bl	80005f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072b8:	bf00      	nop
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20000278 	.word	0x20000278
 80072c0:	2000036c 	.word	0x2000036c
 80072c4:	2000016c 	.word	0x2000016c
 80072c8:	20000268 	.word	0x20000268

080072cc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80072da:	b480      	push	{r7}
 80072dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80072de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr

080072e8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	460a      	mov	r2, r1
 80072f2:	71fb      	strb	r3, [r7, #7]
 80072f4:	4613      	mov	r3, r2
 80072f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80072f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr

08007304 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8007310:	887b      	ldrh	r3, [r7, #2]
 8007312:	461a      	mov	r2, r3
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4804      	ldr	r0, [pc, #16]	; (8007328 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 8007318:	f7fe fe40 	bl	8005f9c <USBD_CUSTOM_HID_SendReport>
 800731c:	4603      	mov	r3, r0
 800731e:	b25b      	sxtb	r3, r3
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	2000036c 	.word	0x2000036c

0800732c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	6039      	str	r1, [r7, #0]
 8007336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2212      	movs	r2, #18
 800733c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800733e:	4b03      	ldr	r3, [pc, #12]	; (800734c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	20000294 	.word	0x20000294

08007350 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	6039      	str	r1, [r7, #0]
 800735a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2204      	movs	r2, #4
 8007360:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007362:	4b03      	ldr	r3, [pc, #12]	; (8007370 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	bc80      	pop	{r7}
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	200002a8 	.word	0x200002a8

08007374 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d105      	bne.n	8007392 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	4907      	ldr	r1, [pc, #28]	; (80073a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800738a:	4808      	ldr	r0, [pc, #32]	; (80073ac <USBD_FS_ProductStrDescriptor+0x38>)
 800738c:	f7ff fe90 	bl	80070b0 <USBD_GetString>
 8007390:	e004      	b.n	800739c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	4904      	ldr	r1, [pc, #16]	; (80073a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007396:	4805      	ldr	r0, [pc, #20]	; (80073ac <USBD_FS_ProductStrDescriptor+0x38>)
 8007398:	f7ff fe8a 	bl	80070b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800739c:	4b02      	ldr	r3, [pc, #8]	; (80073a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000630 	.word	0x20000630
 80073ac:	08007b00 	.word	0x08007b00

080073b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	6039      	str	r1, [r7, #0]
 80073ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	4904      	ldr	r1, [pc, #16]	; (80073d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073c0:	4804      	ldr	r0, [pc, #16]	; (80073d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073c2:	f7ff fe75 	bl	80070b0 <USBD_GetString>
  return USBD_StrDesc;
 80073c6:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000630 	.word	0x20000630
 80073d4:	08007b0c 	.word	0x08007b0c

080073d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	221a      	movs	r2, #26
 80073e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073ea:	f000 f843 	bl	8007474 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073ee:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	200002ac 	.word	0x200002ac

080073fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d105      	bne.n	800741a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	4907      	ldr	r1, [pc, #28]	; (8007430 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007412:	4808      	ldr	r0, [pc, #32]	; (8007434 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007414:	f7ff fe4c 	bl	80070b0 <USBD_GetString>
 8007418:	e004      	b.n	8007424 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4904      	ldr	r1, [pc, #16]	; (8007430 <USBD_FS_ConfigStrDescriptor+0x34>)
 800741e:	4805      	ldr	r0, [pc, #20]	; (8007434 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007420:	f7ff fe46 	bl	80070b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007424:	4b02      	ldr	r3, [pc, #8]	; (8007430 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000630 	.word	0x20000630
 8007434:	08007b20 	.word	0x08007b20

08007438 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	6039      	str	r1, [r7, #0]
 8007442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d105      	bne.n	8007456 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	4907      	ldr	r1, [pc, #28]	; (800746c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800744e:	4808      	ldr	r0, [pc, #32]	; (8007470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007450:	f7ff fe2e 	bl	80070b0 <USBD_GetString>
 8007454:	e004      	b.n	8007460 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4904      	ldr	r1, [pc, #16]	; (800746c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800745a:	4805      	ldr	r0, [pc, #20]	; (8007470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800745c:	f7ff fe28 	bl	80070b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007460:	4b02      	ldr	r3, [pc, #8]	; (800746c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20000630 	.word	0x20000630
 8007470:	08007b34 	.word	0x08007b34

08007474 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800747a:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <Get_SerialNum+0x44>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007480:	4b0e      	ldr	r3, [pc, #56]	; (80074bc <Get_SerialNum+0x48>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007486:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <Get_SerialNum+0x4c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800749a:	2208      	movs	r2, #8
 800749c:	4909      	ldr	r1, [pc, #36]	; (80074c4 <Get_SerialNum+0x50>)
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f814 	bl	80074cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074a4:	2204      	movs	r2, #4
 80074a6:	4908      	ldr	r1, [pc, #32]	; (80074c8 <Get_SerialNum+0x54>)
 80074a8:	68b8      	ldr	r0, [r7, #8]
 80074aa:	f000 f80f 	bl	80074cc <IntToUnicode>
  }
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	1ffff7e8 	.word	0x1ffff7e8
 80074bc:	1ffff7ec 	.word	0x1ffff7ec
 80074c0:	1ffff7f0 	.word	0x1ffff7f0
 80074c4:	200002ae 	.word	0x200002ae
 80074c8:	200002be 	.word	0x200002be

080074cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074de:	2300      	movs	r3, #0
 80074e0:	75fb      	strb	r3, [r7, #23]
 80074e2:	e027      	b.n	8007534 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	0f1b      	lsrs	r3, r3, #28
 80074e8:	2b09      	cmp	r3, #9
 80074ea:	d80b      	bhi.n	8007504 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	0f1b      	lsrs	r3, r3, #28
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4619      	mov	r1, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	440b      	add	r3, r1
 80074fc:	3230      	adds	r2, #48	; 0x30
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e00a      	b.n	800751a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	0f1b      	lsrs	r3, r3, #28
 8007508:	b2da      	uxtb	r2, r3
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	4619      	mov	r1, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	440b      	add	r3, r1
 8007514:	3237      	adds	r2, #55	; 0x37
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	3301      	adds	r3, #1
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	3301      	adds	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
 8007534:	7dfa      	ldrb	r2, [r7, #23]
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	429a      	cmp	r2, r3
 800753a:	d3d3      	bcc.n	80074e4 <IntToUnicode+0x18>
  }
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a0d      	ldr	r2, [pc, #52]	; (800758c <HAL_PCD_MspInit+0x44>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d113      	bne.n	8007582 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <HAL_PCD_MspInit+0x48>)
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	4a0c      	ldr	r2, [pc, #48]	; (8007590 <HAL_PCD_MspInit+0x48>)
 8007560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007564:	61d3      	str	r3, [r2, #28]
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <HAL_PCD_MspInit+0x48>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007572:	2200      	movs	r2, #0
 8007574:	2100      	movs	r1, #0
 8007576:	2014      	movs	r0, #20
 8007578:	f7f9 fa53 	bl	8000a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800757c:	2014      	movs	r0, #20
 800757e:	f7f9 fa6c 	bl	8000a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	40005c00 	.word	0x40005c00
 8007590:	40021000 	.word	0x40021000

08007594 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f7fe fe50 	bl	8006250 <USBD_LL_SetupStage>
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80075ca:	78fa      	ldrb	r2, [r7, #3]
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	440b      	add	r3, r1
 80075d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	4619      	mov	r1, r3
 80075e2:	f7fe fe82 	bl	80062ea <USBD_LL_DataOutStage>
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007600:	78fa      	ldrb	r2, [r7, #3]
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	440b      	add	r3, r1
 800760e:	333c      	adds	r3, #60	; 0x3c
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	4619      	mov	r1, r3
 8007616:	f7fe fed9 	bl	80063cc <USBD_LL_DataInStage>
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe ffe9 	bl	8006608 <USBD_LL_SOF>
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d001      	beq.n	8007656 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007652:	f7f8 ffcd 	bl	80005f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800765c:	7bfa      	ldrb	r2, [r7, #15]
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe ff99 	bl	8006598 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe ff52 	bl	8006516 <USBD_LL_Reset>
}
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe ff93 	bl	80065b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007698:	4b04      	ldr	r3, [pc, #16]	; (80076ac <HAL_PCD_SuspendCallback+0x30>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	4a03      	ldr	r2, [pc, #12]	; (80076ac <HAL_PCD_SuspendCallback+0x30>)
 800769e:	f043 0306 	orr.w	r3, r3, #6
 80076a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	e000ed00 	.word	0xe000ed00

080076b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe ff8d 	bl	80065de <USBD_LL_Resume>
}
 80076c4:	bf00      	nop
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <USBD_LL_Init+0x98>)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a21      	ldr	r2, [pc, #132]	; (8007764 <USBD_LL_Init+0x98>)
 80076e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80076e4:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <USBD_LL_Init+0x98>)
 80076e6:	4a20      	ldr	r2, [pc, #128]	; (8007768 <USBD_LL_Init+0x9c>)
 80076e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80076ea:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <USBD_LL_Init+0x98>)
 80076ec:	2208      	movs	r2, #8
 80076ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80076f0:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <USBD_LL_Init+0x98>)
 80076f2:	2202      	movs	r2, #2
 80076f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80076f6:	4b1b      	ldr	r3, [pc, #108]	; (8007764 <USBD_LL_Init+0x98>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80076fc:	4b19      	ldr	r3, [pc, #100]	; (8007764 <USBD_LL_Init+0x98>)
 80076fe:	2200      	movs	r2, #0
 8007700:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007702:	4b18      	ldr	r3, [pc, #96]	; (8007764 <USBD_LL_Init+0x98>)
 8007704:	2200      	movs	r2, #0
 8007706:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007708:	4816      	ldr	r0, [pc, #88]	; (8007764 <USBD_LL_Init+0x98>)
 800770a:	f7f9 fb3d 	bl	8000d88 <HAL_PCD_Init>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007714:	f7f8 ff6c 	bl	80005f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800771e:	2318      	movs	r3, #24
 8007720:	2200      	movs	r2, #0
 8007722:	2100      	movs	r1, #0
 8007724:	f7fa ff9a 	bl	800265c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800772e:	2358      	movs	r3, #88	; 0x58
 8007730:	2200      	movs	r2, #0
 8007732:	2180      	movs	r1, #128	; 0x80
 8007734:	f7fa ff92 	bl	800265c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800773e:	2398      	movs	r3, #152	; 0x98
 8007740:	2200      	movs	r2, #0
 8007742:	2181      	movs	r1, #129	; 0x81
 8007744:	f7fa ff8a 	bl	800265c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800774e:	23d8      	movs	r3, #216	; 0xd8
 8007750:	2200      	movs	r2, #0
 8007752:	2101      	movs	r1, #1
 8007754:	f7fa ff82 	bl	800265c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000830 	.word	0x20000830
 8007768:	40005c00 	.word	0x40005c00

0800776c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007782:	4618      	mov	r0, r3
 8007784:	f7f9 fc0b 	bl	8000f9e <HAL_PCD_Start>
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f93c 	bl	8007a0c <USBD_Get_USB_Status>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007798:	7bbb      	ldrb	r3, [r7, #14]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	4608      	mov	r0, r1
 80077ac:	4611      	mov	r1, r2
 80077ae:	461a      	mov	r2, r3
 80077b0:	4603      	mov	r3, r0
 80077b2:	70fb      	strb	r3, [r7, #3]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70bb      	strb	r3, [r7, #2]
 80077b8:	4613      	mov	r3, r2
 80077ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077ca:	78bb      	ldrb	r3, [r7, #2]
 80077cc:	883a      	ldrh	r2, [r7, #0]
 80077ce:	78f9      	ldrb	r1, [r7, #3]
 80077d0:	f7f9 fd83 	bl	80012da <HAL_PCD_EP_Open>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f916 	bl	8007a0c <USBD_Get_USB_Status>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f7f9 fdca 	bl	80013a6 <HAL_PCD_EP_Close>
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f8f7 	bl	8007a0c <USBD_Get_USB_Status>
 800781e:	4603      	mov	r3, r0
 8007820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007822:	7bbb      	ldrb	r3, [r7, #14]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7f9 fe73 	bl	8001536 <HAL_PCD_EP_SetStall>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 f8d8 	bl	8007a0c <USBD_Get_USB_Status>
 800785c:	4603      	mov	r3, r0
 800785e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007860:	7bbb      	ldrb	r3, [r7, #14]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f7f9 feb4 	bl	80015f6 <HAL_PCD_EP_ClrStall>
 800788e:	4603      	mov	r3, r0
 8007890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 f8b9 	bl	8007a0c <USBD_Get_USB_Status>
 800789a:	4603      	mov	r3, r0
 800789c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800789e:	7bbb      	ldrb	r3, [r7, #14]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da0c      	bge.n	80078de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	440b      	add	r3, r1
 80078d8:	3302      	adds	r3, #2
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	e00b      	b.n	80078f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078e4:	68f9      	ldr	r1, [r7, #12]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	440b      	add	r3, r1
 80078f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80078f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr

08007900 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7f9 fcb6 	bl	8001290 <HAL_PCD_SetAddress>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f86e 	bl	8007a0c <USBD_Get_USB_Status>
 8007930:	4603      	mov	r3, r0
 8007932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007934:	7bbb      	ldrb	r3, [r7, #14]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	461a      	mov	r2, r3
 800794a:	460b      	mov	r3, r1
 800794c:	72fb      	strb	r3, [r7, #11]
 800794e:	4613      	mov	r3, r2
 8007950:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007960:	893b      	ldrh	r3, [r7, #8]
 8007962:	7af9      	ldrb	r1, [r7, #11]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	f7f9 fda3 	bl	80014b0 <HAL_PCD_EP_Transmit>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f84b 	bl	8007a0c <USBD_Get_USB_Status>
 8007976:	4603      	mov	r3, r0
 8007978:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800797a:	7dbb      	ldrb	r3, [r7, #22]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	607a      	str	r2, [r7, #4]
 800798e:	461a      	mov	r2, r3
 8007990:	460b      	mov	r3, r1
 8007992:	72fb      	strb	r3, [r7, #11]
 8007994:	4613      	mov	r3, r2
 8007996:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079a6:	893b      	ldrh	r3, [r7, #8]
 80079a8:	7af9      	ldrb	r1, [r7, #11]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	f7f9 fd43 	bl	8001436 <HAL_PCD_EP_Receive>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f828 	bl	8007a0c <USBD_Get_USB_Status>
 80079bc:	4603      	mov	r3, r0
 80079be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80079d4:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <USBD_static_malloc+0x14>)
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	bc80      	pop	{r7}
 80079de:	4770      	bx	lr
 80079e0:	20000b1c 	.word	0x20000b1c

080079e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr

080079f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d817      	bhi.n	8007a50 <USBD_Get_USB_Status+0x44>
 8007a20:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <USBD_Get_USB_Status+0x1c>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a39 	.word	0x08007a39
 8007a2c:	08007a3f 	.word	0x08007a3f
 8007a30:	08007a45 	.word	0x08007a45
 8007a34:	08007a4b 	.word	0x08007a4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a3c:	e00b      	b.n	8007a56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	73fb      	strb	r3, [r7, #15]
    break;
 8007a42:	e008      	b.n	8007a56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
    break;
 8007a48:	e005      	b.n	8007a56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4e:	e002      	b.n	8007a56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a50:	2302      	movs	r3, #2
 8007a52:	73fb      	strb	r3, [r7, #15]
    break;
 8007a54:	bf00      	nop
  }
  return usb_status;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop

08007a64 <__libc_init_array>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	2600      	movs	r6, #0
 8007a68:	4d0c      	ldr	r5, [pc, #48]	; (8007a9c <__libc_init_array+0x38>)
 8007a6a:	4c0d      	ldr	r4, [pc, #52]	; (8007aa0 <__libc_init_array+0x3c>)
 8007a6c:	1b64      	subs	r4, r4, r5
 8007a6e:	10a4      	asrs	r4, r4, #2
 8007a70:	42a6      	cmp	r6, r4
 8007a72:	d109      	bne.n	8007a88 <__libc_init_array+0x24>
 8007a74:	f000 f830 	bl	8007ad8 <_init>
 8007a78:	2600      	movs	r6, #0
 8007a7a:	4d0a      	ldr	r5, [pc, #40]	; (8007aa4 <__libc_init_array+0x40>)
 8007a7c:	4c0a      	ldr	r4, [pc, #40]	; (8007aa8 <__libc_init_array+0x44>)
 8007a7e:	1b64      	subs	r4, r4, r5
 8007a80:	10a4      	asrs	r4, r4, #2
 8007a82:	42a6      	cmp	r6, r4
 8007a84:	d105      	bne.n	8007a92 <__libc_init_array+0x2e>
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8c:	4798      	blx	r3
 8007a8e:	3601      	adds	r6, #1
 8007a90:	e7ee      	b.n	8007a70 <__libc_init_array+0xc>
 8007a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a96:	4798      	blx	r3
 8007a98:	3601      	adds	r6, #1
 8007a9a:	e7f2      	b.n	8007a82 <__libc_init_array+0x1e>
 8007a9c:	08007b5c 	.word	0x08007b5c
 8007aa0:	08007b5c 	.word	0x08007b5c
 8007aa4:	08007b5c 	.word	0x08007b5c
 8007aa8:	08007b60 	.word	0x08007b60

08007aac <memcpy>:
 8007aac:	440a      	add	r2, r1
 8007aae:	4291      	cmp	r1, r2
 8007ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab4:	d100      	bne.n	8007ab8 <memcpy+0xc>
 8007ab6:	4770      	bx	lr
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007abe:	4291      	cmp	r1, r2
 8007ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac4:	d1f9      	bne.n	8007aba <memcpy+0xe>
 8007ac6:	bd10      	pop	{r4, pc}

08007ac8 <memset>:
 8007ac8:	4603      	mov	r3, r0
 8007aca:	4402      	add	r2, r0
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d100      	bne.n	8007ad2 <memset+0xa>
 8007ad0:	4770      	bx	lr
 8007ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad6:	e7f9      	b.n	8007acc <memset+0x4>

08007ad8 <_init>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	bf00      	nop
 8007adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	469e      	mov	lr, r3
 8007ae2:	4770      	bx	lr

08007ae4 <_fini>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	bf00      	nop
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr
